[
  {
    "path": "CONTRIBUTORS.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Contributors"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Homepage"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---|:---:|:---:|:---:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "![](https://avatars0.githubusercontent.com/u/22460123?s\u003d100) | Daniel Ho | [Github](https://github.com/j-lum/) | [Homepage](https://se.kasugano.moe)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "![](https://avatars0.githubusercontent.com/u/1673303?s\u003d100) | Ricardo | [Github](https://github.com/damithc/) | [Homepage](https://www.comp.nus.edu.sg/~damithch/)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "![](https://avatars0.githubusercontent.com/u/123?s\u003d100) | Yuchen Li | [Github](https://github.com/yuchenlichuck/) | [Homepage](http://liyc.fun)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "![](https://avatars0.githubusercontent.com/u/123?s\u003d100) | Jintan Wang | [Github](https://github.com/yuchenlichuck/) | [Homepage](http://liyc.fun)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# I would like to join this list. How can I help the project"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For more information, please refer to our [contributor\u0027s guide](https://oss-generic.github.io/process/)."
      }
    ],
    "authorContributionMap": {
      "yuchenlichuck": 6,
      "-": 7
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "group \u0027seedu.cafs\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    mainClassName \u003d \"seedu.cafs.Main\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    archiveBaseName \u003d \"Main\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.0.1\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 1,
      "Bencotti": 4,
      "-": 37
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "![](https://junkee.com/wp-content/uploads/2018/03/hermione.jpg) | Wang Jingtan | [Github](https://github.com/JTWang2000) | [Portfolio](team/JTWang2000.md) "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "![](https://www.wework.com/ideas/wp-content/uploads/sites/4/2015/11/cookie-monster1-1120x630.jpg) | Daniel Ho | [Github](https://github.com/Bencotti) | [Portfolio](team/bencotti.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "![](https://pgw.udn.com.tw/gw/photo.php?u\u003dhttps://uc.udn.com.tw/photo/2019/06/16/realtime/6438307.jpg) | Li Yuchen | [Github](https://github.com/yuchenlichuck) | [Portfolio](team/yuchenlichuck.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "![](https://cdn2.iconfinder.com/data/icons/cute-pug-dog-emoticon/512/Pug_Emoji_happy-512.png) | Ricardo Sanchez-Macias | [Github](https://github.com/rsanchez-macias) | [Portfolio](team/rsanchez-macias.md)"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 1,
      "rsanchez-macias": 2,
      "yuchenlichuck": 1,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* [Introduction](#1-introduction)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * [Purpose](#11-purpose)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * [Target Audience](#12-target-audience)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * [Description](#13-description)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* [Design](#2-design)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * [Architecture](#21-architecture)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * [UI](#22-ui)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * [Task Component](#23-task-component)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    * [Storage Component](#24-storage-component)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * [calendar Component](#25-calendar-component)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* [Implementation](#3-implementation)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * [List By Category](#31-list-by-category)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * [Calendar](#32-calendar-command)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * [Add](#33-proposed-add-task--class)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    * [Storage](#34-storage)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* [Documentation](#4-documentation)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* [Testing](#5-testing)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* [Dev Ops](#6-dev-ops)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "  * [Appendix A: Product Scope](#61-appendix-aproduct-scope)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "  * [Appendix B:Value proposition](#62-appendix-bvalue-proposition)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "  * [Appendix C:User Stories](#63-appendix-cuser-stories)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "  * [Appendix D:Non-Functional Requirements](#64-appendix-dnon-functional-requirements)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "  * [Appendix E:Instructions for Manual Testing](#65-appendix-einstructions-for-manual-testing)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "### 1.1. Purpose"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "This Developer\u0027s guide is meant to guide future developers of the project on how CAFS was developed. "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "It will include the design and implementations of CAFS to give a better understanding of how to start the development of the program"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "### 1.2. Target Audience"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "The target audience of this guide are:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* Developers (Current / Future)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* Testers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* Users interested in the operations of the program"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "### 1.3. Description"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "CAFS - va CLI calender-like task scheduler that supports task and "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "class schedule adding. It is simple to use, and comes with an auto-save function to "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "remember your tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "### 1.4. Setting up"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "#### 1.4.1. Prerequisites"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1. Ensure you have Java 11 or above installed in your Computer"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1. IntelliJ IDE"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "\u003eIntelliJ by default has Gradle plugins installed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "\u003eDo not disable them. If you have disabled them, go to File \u003e Settings \u003e Plugins to re-enable them."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "#### 1.4.2. Setting up the project in your computer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1. Fork this repo, and clone the fork to you computer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1. Open `IntelliJ` (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1. Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Click `New…`​ and find the directory of the JDK"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1. Click `ImportProject`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1. Locate the `build.gradle` file and select it. Click OK"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1. Click `Open as Project`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1. Click `OK` to accept the default setting. "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "#### 1.4.3. Verifying the setup"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1. Run the `seedu.cafs.Main ` and try a few commands."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1. [Run the tests](#5-testing) to ensure they are all set up."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": " "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "## 2. Design"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "### 2.1. Architecture"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "![Architecture Design](images/Architecture_Diagram.jpg)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "Below, we will describe the essential components that CAFS uses:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Main - Main component which controls the flow of execution."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. UI - Component used for user interactions, reading in input and displaying to console"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Parser - Component used to interpret user input and call the corresponding command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Command - Contains all the required implementation for the different commands"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Storage - Reads data from, and writes date to, the hard disk"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Exceptions - Component contains custom error handling methods for the program used by multiple other components"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Calendar - Component containing methods to interact with date and generating a calendar"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Task - Contains all the necessary information and implementations required to interact with the list of tasks"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Commons - Component represents a collection of classes used by multiple other components"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "### 2.2. UI"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* The UI component is not navigable from Command because all results from commands are passed back to main, in the form of `CommandResult`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* UI component then takes in the CommandResult object and displays the feedback from the inputted command"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "Here is a simplified class diagram to illustrate this interaction:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "![Command Result UI](images/UiResult.jpg)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "Ideally, all messages or output meant to be displayed should use the UI class instead of calling a system print or any other method."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* At the moment, the only outliers are certain exception error handling messages which will be standardised to follow this principle in a later version."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "### 2.3. Task Component"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "The TaskList Component depends on 2 other components:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Storage "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * The Storage component is responsible for loading in any saved data stored locally, as well as updating the saved file "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    when changes to the task list have been made"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "2. Command "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * The Command component executes the specific set of instructions required to fulfill a particular user command"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    based on user input."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "![Command Result UI](images/TaskDiagram.jpg)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "The abstract class Task comprises of two subclasses:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* Class - to contain information about a class / timetable schedule"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* TaskNonClass -  to contain information about all other tasks that user needs to complete or be reminded of"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "In total, Task component comprises of 4 classes:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. TaskList - Methods called by commands to operate on task list. Also contains the actual list which stores all tasks."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Task - Abstract class to model a generic task"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Class - Specialised class to model a student\u0027s timetable"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. TaskNonClass - Specialised class to model an actionable task / todo"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "### 2.4. Storage Component "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "The Storage component consists of a single class that parses `Task` instances to Json strings using an external library, Gson by Google. \u003cbr/\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "This component,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* can load from a text file Json strings and parse them to `Task` instances "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* can parse `Task` instances to Json strings and save them in a text file"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Below is a class diagram showing the interactions of this component with other classes."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "![Storage_Class_Diagram](images/Storage_Class_Diagram.png)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "### 2.5. Calendar Component"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "![Command Result UI](images/CalendarDiagram.jpg)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "The Calendar component consists of 2 classes:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. CalendarParser - returns back all the necessary information about the requested month (eg. starting day, how many days/weeks in month)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. GenerateCalendar - formats the requested month and daily data into a monthy calendar"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "The Calendar component depends on one other component:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Task - Calendar component queries the Task component to determine how many tasks there are for each day of the selected month"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "For future development, any code that requires the parsing of LocalDate can use the CalendarParser class to retrieve information of that date."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "## 3. Implementation"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "#### 3.1 List By Category (Previous implementation)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "##### 3.1.1 Implementations"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "The list by category mechanism is facilitated by ListCommand which extends Command."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Given below is an example usage scenario and how the mechanism behaves at each step."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Step1: The user adds a task:  `add n/2113 c/DEADLINE d/2020-03-30 t/11:59` to add a task."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Since the user adds a new category `DEADLINE`, the categoryMap wil add one more key whose value is the category and the value is"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "the index for this task."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Step2: The users adds a task: `add n/3145 c/CLASS` to add a class. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Since the user adds a new category `CLASS`, the categoryMap wil add one more key whose value is the category and the value is"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "the index for this task."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Step3: Users list the class he just added by category CLASS: `list c/CLASS`. The TaskList will"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "return the index of the tasks based on the categoryMap. Then the task in the `CLASS` category"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "will be displayed. "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "This is the Sequence Diagram for list by category. "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "![Sequence Diagram for View](images/listCategorySequence.png)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "This is the UML design for list by category."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "![UML for View](images/listCategory.png)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "##### 3.1.2 Design Considerations"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Aspect: How to find certain category. "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Alternative 1 (previous choice): store HashMap to map category with the key. The map still exists which"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "stores the needed categories. "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Alternative 2 (current choice): linear search when searching tasks. "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "#### 3.2 Calendar Command"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "##### 3.2.1 Implementation"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "The monthy view mechanism is facilitated by CalendarCommand which extends Command."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "Given below is an example usage scenario and how the mechanism behaves at each step."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. The user inputs the command word `calendar`. Upon which, the instance of parser will return a CalendarCommand for execution"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * There is an optional argument that the user can input to select which month to display"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * All invalid months will be redirected to display current month"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        * This is a design choice, and can be changed to display an error if users find it misleading"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. CalendarCommand initialises with the following variables, with the help from CalendarParser class containing the necessary methods related to day/date."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * checkMonth - if user does not input month, it uses computer\u0027s current month"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * startingDay - which day of the week the first day of the months begins on (0-6, where 0 is Monday)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * totalDays - how many days in that month"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * totalWeeks - number of weeks of the month"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * currentYear - the current year. The application currently does not support different years."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. CalendarCommand creates a new class GenerateCalendar with the information initialised above to generate an output of the selected month. "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. The GenerateCalendar calls on TaskList#categoryCounter() for each day of the month to generate the task listing for a particular day."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. The calendar generated is then returned to CalendarCommand as a string and stored in CommandResult where it is displayed Main."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "The class diagram below shows the relationships between the different classes required by the `calendar` feature."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "![Sequence diagram for CalendarCommand](images/CalendarCommand_class.jpg)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "The following diagram summarises what happens when a user executes a new `calendar` command:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "![Sequence diagram for CalendarCommand](images/CalendarCommand_sequence.jpg)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "![Sequence diagram for CalendarCommand](images/sd_Parser.jpg)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "![Sequence diagram for CalendarCommand](images/sd_Month.jpg)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "##### 3.2.2 Design Considerations"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Aspect: Obtaining information required for generating monthly view"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "  "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * Alternative 1: Algorithm to deduce how many weeks in month, which day a date is, how many days in that month"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        * Pros: Will use less memory, requiring only one starting date we are able to derive any other dates. No need to worry about changing template for the new year"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        * Cons: New developers will take additional effort to understand how the algorithm works."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "      "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * Alternative 2: Hardcoded information (constant variables to tell days in month/how many weeks)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        * Pros: Easy maintenance, tedious but easily calculated with web applications."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        * Cons: Tedious and not sustainable, constant updates have to be done to edit the fields for a new year"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * Alternative 3 (current): Make use of Java inbuilt features to parse date by using Calendar and LocalDate."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        * Pros: Easy maintenance, errors handled internally. A lot of methods to manipulate data."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        * Cons: Might be hard to understand how to use at first"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Aspect: Which month to use"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "  "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * User might want to know schedule for other months, but might also want a quick view of current month"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * Solution is to set a default month (taken from computer) and also allow input for preferred month."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "#### 3.3 [Proposed] Add Task / Class"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "##### 3.3.1 Proposed Implementation"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "The add `task/class` mechanism is facilitated by AddCommand which extends Command."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Given below is an example usage scenario and how the mechanism behaves at each step."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1. The user inputs a correct command format:  `add n/title`.\\"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "   Upon which, the instance of parser will return a AddCommand for execution. "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "   "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1. The base Command initialises with the following variables"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * taskList - manages the tasks"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * storage - updates the storage"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * ui - enable ui communication (which is not used in this command)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1. During the execution procedure:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * It calls the functions in the Command which can get the fields of all the input."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * It will then check the date/time format to see if input matches format standard."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * If the inputs are in correct format: will add a task/class by calling the `addTask` of the _taskList_"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Then it will call the `getList` and pass current List into storage for update"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * The newly added tasks and current taskList information will be stored in a string and pass to CommandResult. "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "The class diagram below shows the relationships between the different classes required by the `calendar` feature."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "![Class diagram for CalendarCommand](images/AddCommand_class.png)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "The following diagram summarises what happens when a user executes a new `calendar` command:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "![Sequence diagram for CalendarCommand](images/AddCommand_sequence.png)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "##### 3.3.2 Design Considerations"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1. Distinguish between `class` and `task`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * By checking the input category information:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     If the category is `class`, then will add a **Class**, else will add a **Task**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1. Processing of Date,Time Format"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Alternative 1(current): The AddCommand will check only check the basic format of input(e.g. time should be"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    a range and date should not contain `/`), and then the Task class do the processing"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        * Pros: The **Task** will only focus on the DataTimeFormat error and some small time range errors."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        The passing of variables is also convenient. "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        * Cons: **Task** May also need to deal with error handling. This may not be very easy to deal with. "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Alternative 2: The AddCommand will not only check the format but also check if the input is in correct"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    DateTimeFormat."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        * Pros: It ensures the correctness of adding tasks, so no more error handling in **Task**."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        * Cons: May need to adjust the passing variables, and the AddCommand is dealing with "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        too much things which violates the design idea of OOP. "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "##### 3.3.3 Future Enhancement"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1. Enable `class` to store semester information so that date of class can be displayed in date format."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "2. Enable repetition of `task`: e.g. Once a week, twice a week. "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "#### 3.4. Storage"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "##### 3.4.1 Proposed Implementation"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "The Storage mechanism is facilitated through the Gson library implemented by Google. Tasks"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "are loaded from the `Main` class and saved from the  `done`, `edit`, `add`, and `delete` commands."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "The interaction is similar for all the commands. Below is a sequence diagram showing the interactions between classes when a task is added to the list:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "![Storage_Sequence_Diagram](images/Storage_Sequence_Diagram.png)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "1. The user inputs the `add` command. After being parsed, the command is executed."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "1. The `add` command adds a `Task` instance to the `taskList`."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "1. After successful addition of the task, the `add` command calls the Storage#overwriteFile() to "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "overwrite all the current tasks from the `taskList` to the external `data.txt` file."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "##### 3.4.2 Design Considerations"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "1. Aspect: Saving tasks"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Alternative 1:(current choice) Overwrite all tasks in the `taskList` to the `data.txt` file when a task is edited, added, done, or deleted.  "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * Pros: Less code and easier to maintain and implement"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * Cons: Redoing work that has been done before, thus wasting resources"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Alternative 2: Save only the specific tasks that is being edited, added, done, or deleted."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * Pros: Saves resources since it only changes one task"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * Cons: Difficult and tedious to implement since Json strings are being kept in a text file. For example, it would be hard"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  to know which specific class was edited or deleted from the text file."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "1. Aspect: How to save tasks"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * Alternative 1:(current choice) Save tasks individually as Json strings in the text file. Json strings"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  are separated by new lines in the file. When loading tasks, check whether they are instances of "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  `TaskNonClass` or `Class`."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    * Pros: Avoid overflow of a single Java String since we can have many tasks in the list at a given time"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    * Cons: Tedious to keep track of in the external text file"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * Alternative 2: Save the whole `taskList` as a Json string in the external text file."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    * Pros: Easy to implement both overwriting and loadings tasks from the text file."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    * Cons: May overflow a Java String faster if there are many tasks in the list at a given time."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "## 4. Documentation"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "## 5. Testing"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "### 5.1 Running Tests"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "We adopt the JUnit test: Using IntelliJ JUnit test runner"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "To run all tests, right-click on the src/test/java folder and choose Run `Tests in \u003cfoldername\u003e.test`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "To run a subset of tests, you can right-click on a test package, test class, or a test and choose Run  `TestName`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "### Types of Tests"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1. Unit tests targeting the lowest level methods/classes:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "e.g. `seedu.tasklist.TaskListTest`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "2. Integration tests that are checking the integration of multiple code units (those code units "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "are assumed to be working)."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "e.g. `seedu.command.AddCommandTest`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "## 6. Dev Ops"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "### 6.1 Appendix A:Product Scope"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Target User profile:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1. University students."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "2. Prefer desktop apps."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "3. Can type fast"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "### 6.2 Appendix B:Value proposition"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "It solves:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1. Daily tasks arrangement"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "2. Class schedule arrangement"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "3. Event alert"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "### 6.3 Appendix C:User Stories"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "|v1.0|No 1. is any type of student [epic] (3)   | add events to my calendar | I know what I have to do in the upcoming weeks |"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "|v1.0|                                          | add the location where events take place | I know where I have to go |"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "|v1.0|                                          | add club, research, project, or other meetings | Be reminded of my activities |"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "|v1.0|No 2. is a university student | delete specific events from my calendar | I don\u0027t get reminded about events that already happened |"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "|v1.0|No 3. is a university student | can move events from one day to another | Will not need to  retype all the event details again |"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "|v1.0|No 5. is a university student | add descriptions to events | to remind myself what the event was about |"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "|v2.0| No 4. is a university student | see multiple calendar views (day, week, month) | I can get different perspectives of what my schedule looks like |"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "|v2.0| No 9. is a university student | export my calendar as a text file | I can print it to have a physical copy |"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "|v2.0| No 10. is a university student | remove all the events that happened in a specific date range | it\u0027s easy to delete unnecessary details from my calendar |"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "|v2.0| No 11. is a university student | add my student schedule | quickly reference it when I forget my next class |"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "|v2.0| No 12. is a university student | edit my student schedule | Edit the schedule which I may input wrongly |"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "|v2.0| No 13. is a university student | edit my task | Edit the task which I may input wrongly |"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "|v2.0| No. 23 is a university student | list events by category | I can easily find exactly the events I need to see |"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "|v2.1| No. 6 is a student who cares about friendship | add tokens to specific days in my calendar | I can remember special occasions such as birthdays, religious events, etc. |"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "|v2.1| No. 21 is a university student | list events by date | I can easily find exactly the events I need to see by date |"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "|v2.1| No. 24 is a university student who want to check whether a designated time has events | list events by time | I can easily find exactly the events I need to see by time |"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "|v2.1| No. 25 is a university student who want to check whether a designated time has classes | list events by time and category | I can easily find exactly the classes I need to see by time and category |"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "|v2.1| No. 22 is a university student who has some emergency and want to cancel the events in a specific date | delete events by date | I can easily delete exactly the events I need to see by date |"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "|v2.1| No. 26 is a male student who want to quit events in a designated time cause he has a remote date with his remote girlfriends in that time everday! | delete events by time | I can easily find exactly the events I need to see by time |"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "|v2.1| No. 27 is a university student who want to delete its todo category\u0027s events cause it does not want to work hard anymore that day | delete events by time and category | I can easily find exactly the events I need to see by date and category |"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "|v2.1| No. 28 is a university student who has a emergency in specific time and date. He wants to delete that time\u0027s work | Delete events by date and time | I can easily find exactly the events I need to see by date and time |"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "### 6.4 Appendix D:Non-Functional Requirements"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Should work in an environment without internet access."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Should offer easy / experienced user input modes to accommodate to different proficiencies"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Data should be persistent across different start-ups"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Not too restrictive on user to avoid frustrations (user friendly)"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "### 6.5 Appendix E:Instructions for Manual Testing"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "#### 6.5.1 Launch and Shutdown"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1.  Initial launch"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Ensure you have Java 11 or above installed in your Computer"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Download the latest cafs.jar [here](https://github.com/AY1920S2-CS2113-T14-3/tp/releases)"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Copy the file to the folder you want to use as the home folder."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* Run the jar file using `java - jar cafs.jar`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "\u003e Expected: Shows a welcome message from CAFS"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "2. Shutdown"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Enter the command `bye` to exit the CAFS"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Close the command terminal."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "\u003e Expected: Data is stored in the `data.txt`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "#### 6.5.2 Add Task/Class"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1. Add a Task"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Test case 1: "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        * `add n/Project Meeting t/12:00-13:00 15:00-16:00 d/2020-07-01 2020-09-01 l/NUS NTU c/meeting`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        \u003e Expected:\u003cbr/\u003e "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Nice! Added the following task to the calendar:                                                                                            "
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        [MEETING] Title: Project Meeting | 2020-07-01 : 12:00 - 13:00 ( NUS ) | 2020-09-01 : 15:00 - 16:00 ( NTU )\u003cbr/\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Now you have \u003cNUM\u003e task/tasks in your list"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Test case 2:"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        * `add n/2113 v2.1 t/23:00-24:00 d/2020-05-16 c/deadline`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        \u003e Expected:\u003cbr/\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "         Nice! Added the following task to the calendar:                                                                                            "
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "          [DEADLINE] Title: 2113 v2.1 | 2020-05-16 : 23:00 - 23:59\u003cbr/\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "         Now you have \u003cNUM\u003e task/tasks in your list"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "2. Add a Class"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Test case 1:"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        * `add t/11:00-12:00 01:00-03:00 n/2113 d/3 4 c/CLASS l/COM2 COM1`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        \u003e Expected:\u003cbr/\u003e "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Nice! Added the following task to the calendar:                                                                                            "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        [CLASS] Title: 2113 | WEDNESDAY : 11:00 - 12:00 ( COM2 ) | THURSDAY : 01:00 - 03:00 ( COM1 )\u003cbr/\u003e"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Now you have \u003cNUM\u003e task/tasks in your list"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Test case 2:"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        * `add n/3245 t/17:00-19:00 d/5 c/CLASS`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        \u003e Expected:\u003cbr/\u003e"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "         Nice! Added the following task to the calendar:                                                                                        "
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "         [CLASS] Title: 3245 | FRIDAY : 17:00 - 19:00\u003cbr/\u003e"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "         Now you have \u003cNUM\u003e task/tasks in your list"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "#### 6.5.3 Edit Task/Class"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "_Assumption: Valid index is provided. This test output is based on previous added task in the_ [Add Task/Class](#652-add-taskclass)"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1. Edit a Task"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Test case 1:"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        * `edit 2 l/NUSCOM2 r/Finish soon`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        \u003e Expected:\u003cbr/\u003e"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "         Task 2 edited\u003cbr/\u003e"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "         [DEADLINE] Title: 2113 v2.1 | Reminder: Finish soon | 2020-05-16 : 23:00 - 23:59 ( NUSCOM2 )"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Test case 2:"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        * `edit 1 d/2020-09-10 t/12:00-13:00 l/NUS`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        \u003e Expected:\u003cbr/\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "         Task 2 edited\u003cbr/\u003e"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "         [MEETING] Title: Project Meeting | 2020-09-10 : 12:00 - 13:00 ( NUS )"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "2. Edit a Class"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Test case:"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * _Previous index 4 is a class.Also, previously this index 4 class has only one time slots_"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        * `edit 4 d/1`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        \u003e Expected:\u003cbr/\u003e "
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Task 1 edited\u003cbr/\u003e"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        [CLASS] Title: 3245 | MONDAY : 17:00 - 19:00"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "#### 6.5.4 Done Task"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* _Assumption: Valid index is provided. This test output is based on previous added task in the_ [Add Task/Class](#652-add-taskclass)"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Test case:"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        * `done 1`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        \u003e Expected:\u003cbr/\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Task marked as done:\u003cbr/\u003e "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        [Y] [MEETING] Title: Project Meeting | 2020-07-01 : 12:00 - 13:00 ( NUS ) | 2020-09-01 : 15:00 - 16:00 ( NTU )"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "#### 6.5.5 List Task"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* _Assumption: This test output is based on previous added task in the_ [Add Task/Class](#652-add-taskclass)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Test case 1:"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        * `list`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        \u003e Expected: all inputted valid tasks + class"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Test case 2:"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        * `list c/class`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        \u003e Expected: list all tasks whose category is CLASS"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Test case 3:"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        * `list d/2020-05-16` "
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        \u003e Expected: Lists the tasks that fall on 2020-05-16"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Test case 4:"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        * `list d/2020-05-16 t/23:00-23:59`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        \u003e Expected: Lists the tasks that fall on 2020-05-16 and within the time range 23:00-23:59"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Test case 5:"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        * `list d/2020-05-16 t/23:00-23:59 c/deadline`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        \u003e Expected: Lists the tasks that fall on 2020-05-16 and within the time range 23:00-23:59 and whose category is DEADLINE"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "#### 6.5.6 Delete Task"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* _Assumption: Valid index is provided. This test output is based on previous added task in the_ [Add Task/Class](#652-add-taskclass)"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Test case 1: "
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        * `delete 3`"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        \u003e Expected:\u003cbr/\u003e"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "         The following task has been removed:                                                                                           "
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "         [CLASS] Title: 2113 | WEDNESDAY : 11:00 - 12:00 ( COM2 ) | THURSDAY : 01:00 - 03:00 ( COM1 )\u003cbr/\u003e"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "         Now you have \u003cNUM\u003e task/tasks in your calendar."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Test case 2: "
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "         * `delete d/2020-05-16`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "         \u003e Expected:\u003cbr/\u003e"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "           The following task has been removed:                                                                                           "
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "           [DEADLINE] Title: 2113 v2.1 | 2020-05-16 : 23:00 - 23:59\u003cbr/\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "           Now you have \u003cNUM\u003e task/tasks in your calendar."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Test case 3: "
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "         * `delete t/14:00-16:00`"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "         \u003e Expected:\u003cbr/\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "           The following task has been removed:                                                                                           "
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "           [MEETING] Title: Project Meeting | 2020-07-01 : 12:00 - 13:00 ( NUS ) | 2020-09-01 : 15:00 - 16:00 ( NTU )\u003cbr/\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "           Now you have \u003cNUM\u003e task/tasks in your calendar."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                                  "
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "#### 6.5.7 Find"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* _Assumption: This test output is based on previous added task in the_ [Add Task/Class](#652-add-taskclass) "
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Test case:"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        * `find nus`"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        \u003e Expected:\u003cbr/\u003e"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Found the followings tasks:\u003cbr/\u003e"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        1.[MEETING] Title: Project Meeting | 2020-07-01 : 12:00 - 13:00 ( NUS ) | 2020-09-01 : 15:00 - 16:00 ( NTU )"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        "
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "#### 6.5.8 Calendar"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Test case:"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * `calendar`"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     \u003e Expected: current month calendar will be displayed.\u003cbr/\u003e"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     The tasks on that month will also be displayed."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "#### 6.5.9 Clear"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Test case:"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * `clc`"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     \u003e Expected: Clears the output window."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        "
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "#### 6.5.10 Help"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Test case:"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * `help`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    \u003e Expected: The usage of command will be displayed. "
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": " "
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 305,
      "rsanchez-macias": 43,
      "Bencotti": 162,
      "yuchenlichuck": 9,
      "-": 23
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "# Calendar Application For Students (CAFS)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "CAFS is a calendar application where students can keep track of all their current events. \u003cbr/\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Below you can find some useful links related to the application and to our awesome team:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "We hope you enjoy using CAFS!"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "rsanchez-macias": 5,
      "Bencotti": 2,
      "yuchenlichuck": 1,
      "-": 4
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "# CAFS - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "By: `AY1920S2-CS2113-T14-3`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "1. [Introduction](#1-introduction)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "1. [Quick Start](#2-quick-start)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "1. [Features](#3-features) \u003cbr/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  3.1 [Viewing help: `help`](#31-viewing-help-help) \u003cbr/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  3.2 [Adding tasks: `add`](#32-adding-tasks-add) \u003cbr/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  3.3 [Editing tasks: `edit`](#33-editing-tasks-edit) \u003cbr/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  3.4 [Listing tasks: `list`](#34-listing-tasks-list) \u003cbr/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  3.5 [Deleting tasks: `delete`](#35-deleting-tasks-delete) \u003cbr/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  3.6 [Marking tasks as done: `done`](#36-marking-tasks-as-done-done) \u003cbr/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  3.7 [Finding tasks: `find`](#37-finding-tasks-find) \u003cbr/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  3.8 [Viewing calendar: `calendar`](#38-viewing-calendar-calendar) \u003cbr/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  3.9 [Clearing output: `clc`](#39-clearing-output-clc) \u003cbr/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  3.10 [Exiting program: `bye`](#310-exiting-program-bye)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "1. [FAQ](#4-faq)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "1. [Command Summary](#5-command-summary)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "CAFS is a CLI calender-like task scheduler that supports task and "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "class schedule adding. It is simple to use, and comes with an auto save function to "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "remember your tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "---"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "1. Ensure you have Java 11 or above installed in your computer."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "1. Download the latest cafs.jar [here](https://github.com/AY1920S2-CS2113-T14-3/tp/releases)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "1. Copy the file to the folder you want to use as the home folder."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Run the jar file using `java - jar cafs.jar` from your terminal window."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "---"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "**Command Format:**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* The \u003cUPPER_CASE\u003e format indicates user input. However, when inputting, there is no need to input `\u003c\u003e`symbol. "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "The `\u003c \u003e` symbol just for readability. "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Command keyword (e.g. `add`) is case insensitive. However, the delimiters (e.g. `n/`) are case sensitive."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* It is okay to switch the sequence when inputting the delimiters:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    * `add n/\u003cNAME\u003e l/\u003cLOCATION\u003e` has same effects as `add l/\u003cLOCATION\u003e n/\u003cNAME\u003e `"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* When inputting a time, the format is always:`hh:mm-hh:mm`. No space is allowed around `-`. "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "  Also, input like `1:00-2:00` will not be allowed. "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* When inputting a date, the format is always: `yyyy-mm-dd`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Some recognized date/time error will be automatically parsed to accepted format."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    * `24:00` will be parsed to `23:59` since 24:00 is next day. "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    * `2021-02-30` will be parsed to `2021-02-28`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "---"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "### 3.1. Viewing help: `help`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Displays the set of supported commands \u003cbr/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "**Usage**: `help`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "### 3.2. Adding tasks: `add`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Users add tasks using this command. \u003cbr/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "**Usage**: `add  n/\u003cNAME\u003e t/\u003cTIME\u003e l/\u003cLOCATION\u003e d/\u003cDATE\u003e i/\u003cINFORMATION\u003e r/\u003cREMINDER\u003e c/\u003cCATEGORY\u003e` \u003cbr/\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * Only name `\u003cNAME\u003e` is compulsory to include. However, if user only inputs time, "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    then date of current day will be added automatically. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "  * Space is okay in `\u003cNAME\u003e`,`\u003cREMINDER\u003e` and `\u003cINFORMATION\u003e`.  e.g.: `n/2113 deadline` is accepted.                                                       "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * The `\u003cTIME\u003e` should be in time duration format: `hh:mm-hh:mm` (e.g. `14:00-16:00`)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "      There should be no space between this duration. "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * Since a task/class may have multiple time zones in a week, students can just add list of time zones."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "      However, the number of `\u003cTIME\u003e`should match with the number of `\u003cDATE\u003e`. It is suggested that "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "      the number of `\u003cLOCATION\u003e` also match with the number of `\u003cTIME\u003e`. Use space to separate the time "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "      zone/date/location. "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Example"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "       * `add n/CS2113 t/12:00-13:00 15:00-16:00 d/2020-07-01 2020-09-01 l/NUS NTU`  "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "       Adds a task with two time zones, dates, and locations."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "  * If no `\u003cDATE\u003e` is inputted by `\u003cTIME\u003e` is inputted, the system will automatically add today\u0027s date"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "      to that task. "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * The default category is TODO. To add a class, just indicate the category is `CLASS`. The category is"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "      case-insensitive.  "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "  * Task\u0027s notification are `[N]` (not completed, after just add) and `[Y]` (completed, after done) Class\u0027s notification is always `[W]` (weekly)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "#### 3.2.1 Adding Task:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* `\u003cDate\u003e` should be in format:`yyyy-mm-dd`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Examples: \u003cbr/\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* `add n/Project Meeting t/12:00-13:00 15:00-16:00 d/2020-07-01 2020-09-01 l/NUS NTU c/meeting`\u003cbr/\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Adds a meeting: Project Meeting on two time slots: 12:00-13:00 on 2020-07-01(NUS) and 15:00-16:00 on 2020-09-01(NTU)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* `add n/2113 v2.1 t/23:00-24:00 d/2020-05-16 c/deadline`\u003cbr/\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Adds a deadline: 2113 v2.1 on a specific date with a time range for the deadline. "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* `add n/Project Meeting t/12:00-13:00 15:00-16:00 l/NUS NTU i/important`\u003cbr/\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Adds a task  with two time slots on two locations with a description important."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "#### 3.2.2 Adding Class:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* `\u003cDATE\u003e` should be the day of the week, represented by an integer (e.g. `1 3` means Mon Wed). "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Examples:\u003cbr/\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* `add t/11:00-12:00 01:00-03:00 n/2113 d/3 4 c/CLASS l/COM2 COM1` \u003cbr/\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Adds a class with two time frames, two days (Wednesday and Thursday), and two locations"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "### 3.3. Editing tasks: `edit`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Edit the inputted task/class. \u003cbr/\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "**Usage**:`edit TASK_INDEX t/\u003cTIME\u003e l/\u003cLOCATION\u003e d/\u003cDATE\u003e i/\u003cINFORMATION\u003e r/\u003cREMINDER\u003e c/\u003cCATEGORY\u003e`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* It is not allowed to edit the `\u003cNAME\u003e`."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* It is okay to edit the `\u003cCATEGORY\u003e`. However, it is not allowed to change from class category to other "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  categories. It is also not allowed to change from other categories to class category. "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* When edit `\u003cTIME\u003e` and `\u003cDATE\u003e`, please be reminded that the number of `\u003cTIME\u003e` should match with the "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "  number of `\u003cDATE\u003e`. It is suggested that number of location `\u003cLOCATION\u003e` also matches. "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * If you only have added one of the `\u003cTIME\u003e` and `\u003cDATE\u003e` for that task, no need to follow the "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "      _number matching of TIME and DATE_ since there is only field in that task. "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * If you have added both `\u003cTIME\u003e` and `\u003cDATE\u003e` for a task _1_:\u003cbr/\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "      For example:  Previously the task _1_ is:`[TODO] Title: Project Meeting | 2020-09-10 : 11:00 - 12:00`\u003cbr/\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "      When editing, can either input `\u003cTIME\u003e` with same number of `\u003cDATE\u003e` in current task _1_ : "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                \u003cbr/\u003ee.g. `edit 1 t/01:00-02:00`\u003cbr/\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                or input `\u003cDATE\u003e` with same number of `\u003cTIME\u003e` in current task _1_ : "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                \u003cbr/\u003ee.g. `edit 1 d/2020-11-12`\u003cbr/\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                or input both `\u003cTIME\u003e` and `\u003cDATE\u003e` with same number : "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                \u003cbr/\u003ee.g. `edit 1 d/2020-09-10 2020-09-11 t/11:00-12:00 13:00-14:00`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Examples: \u003cbr/\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* `edit 2 l/NUSCOM2`\u003cbr/\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Edit the location of task 2 to be NUSCOM2"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* `edit 2 c/todo`  \u003cbr/\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Edit the category of task 2 to be TODO"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "### 3.4. Listing tasks: `list`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "#### 3.4.1. List"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Displays all the current tasks in the list. \u003cbr/\u003e "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "**Usage**: `list`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Note that other list sub-commands (see below) will default to just `list` when input is wrongly formatted"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "#### 3.4.2. List by Category"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "List tasks that belong to a specific category. \u003cbr/\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "**Usage**: `list c/\u003cCATEGORY\u003e`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Wrong command: `list TODO` will have the same effects as just `list`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* The `\u003cCATEGOTY\u003e` is case insensitive. That is, `list c/TODO` and `list c/todo` have same effect."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Examples: \u003cbr/\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "* `list c/TODO`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "* `list c/DEADLINE`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "#### 3.4.3. List by Time"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Lists tasks and classes by specific time range. \u003cbr/\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "**Usage**: `list t/\u003cTIME\u003e`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* `task` and `class` with a specific time range can be listed by `list t/hh:mm-hh:mm`."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "List the `events` which are exactly at that time range or have a overlap at that time range."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Example: \u003cbr/\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* `list t/15:00-16:00`\u003cbr/\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": " Lists the `tasks` that fall within the given time frame "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "#### 3.4.4. List by Date"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "List tasks by specific date. \u003cbr/\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "**Usage** : `list d/\u003cDATE\u003e`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "* `task` with a specific date can be listed by `list d/yyyy-mm-dd`. Or `tasks` have date/dates in the specific dates can be listed by  `list d/yyyy-mm-dd yyyy-mm-dd ...` *(more dates)*."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "* `class` cannot be listed by date since class only adopts schedule."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Examples: \u003cbr/\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* `list d/2020-07-01` \u003cbr/\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Lists the `tasks` that fall on the date `2020-07-01` "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* `list d/2020-07-01 d/2020-09-01` \u003cbr/\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Lists the `tasks` that fall on either `2020-07-01` or `2020-09-01`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "  "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "#### 3.4.5. List by Date \u0026 Time        "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Lists tasks by specific date and time. \u003cbr/\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "**Usage** : `list d/\u003cDATE\u003e t/\u003cTIME\u003e`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* `task` with a specific date and time range can be listed by `list d/yyyy-mm-dd t/hh:mm-hh:mm`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* `class` cannot be listed by date and time since class only adopts schedule.   "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* List the `tasks` which are exactly at that time range or have a overlap at that time range."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "  "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* `list d/2020-07-01 t/12:00-13:00` \u003cbr/\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Lists the `tasks` that fall on the given date (`2020-07-01`) and within the given time frame (`12:00-13:00`)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "      "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "#### 3.4.6. List by Category, Date \u0026 Time"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "List tasks by category and date and time. "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "**Usage**: `list c/\u003cCATEGORY\u003e d/\u003cDATE\u003e t/\u003cTIME\u003e`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* `tasks` in a specific date and specific time range in a  specific category. However, the `class` category cannot be shown, since these don\u0027t have date values."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* `tasks`  just in a specific date/dates in a specific category. However, the `class` category cannot be shown, since these don\u0027t have date values."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* `tasks` and `classes`  just in a specific time range in a specific category. All `categories` can be shown."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Examples: \u003cbr/\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* `list d/2020-07-01 t/12:00-13:00 c/meeting` \u003cbr/\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Lists the `tasks` whose start time before `2020-07-01 13:00` and end time after `2020-07-01 12:00` and  category is `meeting`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* `list d/2020-05-16 c/deadline` \u003cbr/\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Lists the `tasks` which have date on `2020-05-16` and whose `category` is `deadline`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* `list t/23:00-23:30 c/deadline`\u003cbr/\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Lists the `tasks` whose start time before `23:00` and end time after `23:30`and `category` is `deadline`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "### 3.5. Deleting tasks: `delete`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "#### 3.5.1. Delete a task/class"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Deletes a task from the list \u003cbr/\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "**Usage**: `delete \u003cTASK_INDEX\u003e`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Use `list` to derive task index"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Index has to be an _integer_"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* `delete 2` \u003cbr/\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Deletes the second task from the list."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "#### 3.5.2 - Delete by Time"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Delete tasks and classes by specific time range. \u003cbr/\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "**Usage**: `delete t/\u003cTIME\u003e`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* `task` and `class` with a specific time range can be deleted by `delete t/hh:mm-hh:mm`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Delete the `tasks` and `classes`  which are exactly at that time range or have a overlap at that time range. "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* `delete t/15:00-16:00` \u003cbr/\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Deletes the `tasks` that fall within the given time frame `15:00-16:00`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "#### 3.5.3 - Delete by Date"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Delete tasks by specific date. \u003cbr/\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "**Usage** : `delete d/\u003cDATE\u003e`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* `task` with a specific date can be listed by `delete d/yyyy-mm-dd`. "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* `class` cannot be deleted by date since classes adopt to a schedule (Monday to Sunday)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "   * `delete d/2020-07-01` \u003cbr/\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "      Deletes the `tasks` that fall on `2020-07-01`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "   * `delete d/2020-07-01 d/2020-09-01` \u003cbr/\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "      Deletes the `tasks` that fall on either `2020-07-01` or `2020-09-01`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "#### 3.5.4 - Delete by Date \u0026 Time        "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Delete tasks by specific date and time. \u003cbr/\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "**Usage** : `delete d/\u003cDATE\u003e t/\u003cTIME\u003e`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "* `task` with a specific date and time can be listed by `delete d/yyyy-mm-dd t/hh:mm-hh:mm`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "*  `class` cannot be listed by date and time since class only adopts schedule. "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Delete the `tasks` which are exactly at that time range or have a overlap at that time range."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "  "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": " Example: \u003cbr\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "   * `delete d/2020-07-01 t/12:00-13:00` \u003cbr/\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "      Deletes the `tasks` that fall on the given date and within the given time frame."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "### 3.6. Marking tasks as done: `done`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "Marks a task as complete, changing the notification from \u0027`N`\u0027 (not completed) to \u0027`Y`\u0027 (completed). \u003cbr\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "**Usage**: `done \u003cTASK_INDEX\u003e` "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "* Obtain task index from `list` command. (without any filters)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "* task cannot be a from the category class. Class\u0027s notification is always \u0027`W`\u0027 (Weekly)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "* Index is a valid positive number."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* `done 4` \u003cbr/\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "Marks the fourth task as completed. "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "### 3.7. Finding tasks: `find`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Searches all task titles, descriptions, and locations for supplied pattern \u003cbr/\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "**Usage**: `find \u003cPATTERN\u003e`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Keyword is case _insensitive_"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Can search the pattern in title, description and location. "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* `find project meeting` \u003cbr/\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Lists the tasks with the given pattern (`project meeting`) if found in their title, description, or location"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "### 3.8. Viewing calendar: `calendar`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Prints a monthly representation of a calendar. Shows the number of tasks a user has on a particular day."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Users are able to specify which month to look up. Default is the current month. "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Will still display tasks from past months as long as not marked as complete. \u003cbr/\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "**Usage**: `calendar \u003coptional month\u003e` "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Month is in integer representation"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Where 1 is January and 12 is December"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Default set to current month"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* If number supplied is not within the month range, it will be set to current month"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "### 3.9. Clearing output: `clc`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Clears the output window. \u003cbr/\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "**Usage**:`clc`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "### 3.10. Exiting program: `bye`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Exits the program. \u003cbr/\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "**Usage**: `bye`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "\u003cbr/\u003e  "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "---"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "## 4. FAQ"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": " * **Q:** How do I save my tasks? \u003cbr/\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": " **A:** Tasks are saved automatically and loaded upon start up of application"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    * If unable to load, check the directory and file name:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        * Default folder from application folder: `/Save/`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        * Default file name: `data.txt`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "---"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "## 5. Command Summary"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": " * **Add**: `add n/\u003cNAME\u003e t/\u003cTIME\u003e l/\u003cLOCATION\u003e d/\u003cDATE\u003e i/\u003cINFORMATION\u003e r/\u003cREMINDER\u003e c/\u003cCATEGORY\u003e`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": " * **Edit**: `edit TASK_INDEX t/\u003cTIME\u003e l/\u003cLOCATION\u003e d/\u003cDATE\u003e i/\u003cINFORMATION\u003e r/\u003cREMINDER\u003e c/\u003cCATEGORY\u003e`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": " * **List**: "
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    * `list`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    * `list c/\u003cCATEGORY\u003e` "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    * `list t/\u003cTIME\u003e`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    * `list d/\u003cDATE\u003e`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    * `list d/\u003cDATE\u003e t/\u003cTIME\u003e`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    * `list c/\u003cCATEGORY\u003e d/\u003cDATE\u003e t/\u003cTIME\u003e`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": " * **Delete**:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    * `delete \u003cTASK_INDEX\u003e` "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    * `delete t/\u003cTIME\u003e` "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    * `delete d/\u003cDATE\u003e`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    * `delete d/\u003cDATE\u003e t/\u003cTIME\u003e`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": " * **Done**: `done \u003cTASK_INDEX\u003e` "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": " * **Find**: `find \u003cPATTERN\u003e` "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": " * **Help**: `help`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": " * **Calendar**: `calendar` or `calendar \u003cMONTH\u003e`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": " * **Clear**:`clc`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": " * **Exit**: `bye`"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 52,
      "rsanchez-macias": 227,
      "Bencotti": 3,
      "yuchenlichuck": 23,
      "-": 19
    }
  },
  {
    "path": "docs/team/JTWang2000.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "# Wang Jingtan - Project Portfolio "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "## PROJECT: CALENDAR APPLICATION FOR STUDENTS"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "**Calendar Application For Students (CAFS)** is a calendar application used to "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "track the daily events in a student\u0027s life. The user interacts with the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "application using a CLI. It is written in Java. "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "### Code contribution"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Code Contributed: [Functional Code](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#search\u003djtwang2000\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Add Command: allows users to add tasks \u003cbr/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Edit Command: allows users to edit tasks \u003cbr/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Task List (Finalized version): manages the tasks in the list \u003cbr/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Tasks (Finalized version): Create two task types: taskNonClass and Class \u003cbr/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* List Command (Initial version of list by category): lists tasks by category \u003cbr/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "###  Enhancements implemented"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Features update : Design the structure of features to benefit users"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Design add"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Design edit"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Design list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Design delete"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Find Command update : Enable case insensitive task finding"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Command word case insensitive"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "### Contribution to documentation:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Hyperlinks and structure enhancement"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Major part in Features"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Add"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Edit"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * List draft"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Delete draft"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Find"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Clear"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Exit"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Command summary"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "### Contribution to the DG:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Hyperlinks and structure enhancement"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Initial version List by category implementation explanation and visuals"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Add Command implementation explanation and visuals"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Dev Ops"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Appendix A: Product Scope"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Appendix B:Value proposition"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Appendix E:Instructions for Manual Testing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "### Contributions to team-based tasks:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "#### Review/mentoring contributions:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Reviews on github:[Check PR review](https://github.com/AY1920S2-CS2113-T14-3/tp/pulls?q\u003dis%3Apr+is%3Aclosed+reviewed-by%3A%40me)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Responsiveness on github issue discussion"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Find bugs/enhancement of team project: [Check the issues created by JT](https://github.com/AY1920S2-CS2113-T14-3/tp/issues?q\u003dis%3Aissue+author%3AJTWang2000+is%3Aclosed)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "#### Contributions beyond the project team"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* PE Dry Run Discover bugs"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* Discover UML errors in other team during online tutorial"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 57
    }
  },
  {
    "path": "docs/team/bencotti.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "# Ho Jing Yang Daniel - Project Portfolio "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "## PROJECT: CALENDAR APPLICATION FOR STUDENTS"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "**Calendar Application For Students (CAFS)** is a calendar application used to "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "track the daily events in a student\u0027s life. The user interacts with the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "application using a CLI. It is written in Java. "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "### Code contribution"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* Code Contributed: [Functional Code](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#search\u003dbencotti\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* Basic skeleton code"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* Storage class: saves task to JSON file and rebuild list when needed"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* Parser class: Parses user input and returns respective command - improved performance by including validation for certain commands in this phase"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* CalendarCommand: prints calendar view and tasks for day of month"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* Calendar Component: CalendarParser, GenerateCalendar - very difficult to visualise, and manipulate strings in order to get table output"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* DoneCommand : Create two task types: taskNonClass and Class"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* JUnit Tests: added tests for Calendar, Done, Exit commands"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "### Enhancements implemented"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* LocalDate, LocalTime update : Update code to work with proper date object, and helper methods - complete overhaul of certain methods to work with new variable type"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* More validation methods : easier validation before logic of code even runs to improve performance"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "### Contribution to documentation:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* Hyperlinks and structure enhancement"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* Minor part in Features"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* Command summary"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* Dev Ops"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * Appendix C: User Stories"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * Appendix D: Non-Functional Requirements"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "### Contribution to the DG:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* Formatting of the document"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* Calendar implementation "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* Architecture of program - All sections within architecture less storage component"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "### Contributions to team-based tasks:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* Active participation during tutorials and answers questions online and offline about new concepts"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* Keeping team on track and asking for member\u0027s availability for meetings"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* Helping team members debug intelliJ issues "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "#### Review/mentoring contributions:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* Reviews on github"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* Responsiveness on github issue discussion"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "#### Contributions beyond the project team"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* PE Dry Run Discover bugs"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* Discover UML errors in other team during online tutorial"
      }
    ],
    "authorContributionMap": {
      "Bencotti": 49
    }
  },
  {
    "path": "docs/team/rsanchez-macias.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "# Ricardo Sanchez-Macias - Project Portfolio "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "## PROJECT: CALENDAR APPLICATION FOR STUDENTS"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "**Calendar Application For Students (CAFS)** is a calendar application used to "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "track the daily events in a student\u0027s life. The user interacts with the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "application using a CLI. It is written in Java. "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Code Contributed: [Functional Code](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#search\u003drsanchez-macias\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Contributions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * TaskList(initial version): manages the tasks in the list \u003cbr/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * JUnit Tests: added tests for Parser and Storage class"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * UI: refactored messages to Message class and formatted feedback shown to the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * Storage: able to instantiate Json strings to Class and NonClassTask instances"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * Find Command(initial version): searches pattern in task title and description only "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * Clear Command: clears output in terminal window \u003cbr/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * Help Command: formatted output to follow UG"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * Documentation: fix links to UG, DG, and About Us"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "### Contribution to User Guide:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Structure enhancement."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Fix typos and formatting issues."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Below is a section contributed to User Guide: "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "---"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "### 3.7. Finding tasks: `find`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Searches all task titles, descriptions, and locations for supplied pattern \u003cbr/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "**Usage**: `find \u003cPATTERN\u003e`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Keyword is case _insensitive_"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Can search the pattern in title, description and location. "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* `find project meeting` \u003cbr/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Lists the tasks with the given pattern (`project meeting`) if found in their title, description, or location"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "---"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "### Contribution to the Developer Guide:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Below is a section contributed to Developer Guide:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "---"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "### 2.4. Storage Component "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "The Storage component consists of a single class that parses `Task` instances to Json strings using an external library, Gson by Google. \u003cbr/\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "This component,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* can load from a text file Json strings and parse them to `Task` instances "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* can parse `Task` instances to Json strings and save them in a text file"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "Below is a class diagram showing the interactions of this component with other classes."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "![Storage_Class_Diagram](../images/Storage_Class_Diagram.png)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "---"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "### 3.4. Storage"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "#### 3.4.1 Proposed Implementation"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "The Storage mechanism is facilitated through the Gson library implemented by Google. Tasks"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "are loaded from the `Main` class and saved from the  `done`, `edit`, `add`, and `delete` commands."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "The interaction is similar for all the commands. Below is a sequence diagram showing the interactions between classes when a task is added to the list:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "![Storage_Sequence_Diagram](../images/Storage_Sequence_Diagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "1. The user inputs the `add` command. After being parsed, the command is executed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "1. The `add` command adds a `Task` instance to the `taskList`."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "1. After successful addition of the task, the `add` command calls the Storage#overwriteFile() to "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "overwrite all the current tasks from the `taskList` to the external `data.txt` file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "#### 3.4.2 Design Considerations"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "1. Aspect: Saving tasks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Alternative 1:(current choice) Overwrite all tasks in the `taskList` to the `data.txt` file when a task is edited, added, done, or deleted.  "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * Pros: Less code and easier to maintain and implement"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * Cons: Redoing work that has been done before, thus wasting resources"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Alternative 2: Save only the specific tasks that is being edited, added, done, or deleted."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * Pros: Saves resources since it only changes one task"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * Cons: Difficult and tedious to implement since Json strings are being kept in a text file. For example, it would be hard"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  to know which specific class was edited or deleted from the text file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "3. Aspect: How to save tasks"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Alternative 1:(current choice) Save tasks individually as Json strings in the text file. Json strings"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "are separated by new lines in the file. When loading tasks, check whether they are instances of "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "`TaskNonClass` or `Class`."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * Pros: Avoid overflow of a single Java String since we can have many tasks in the list at a given time"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * Cons: Tedious to keep track of in the external text file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "* Alternative 2: Save the whole `taskList` as a Json string in the external text file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * Pros: Easy to implement both overwriting and loadings tasks from the text file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  * Cons: May overflow a Java String faster if there are many tasks in the list at a given time."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "  "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "rsanchez-macias": 89
    }
  },
  {
    "path": "docs/team/yuchenlichuck.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "# Li Yuchen - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "## PROJECT: [CAFS](https://github.com/AY1920S2-CS2113-T14-3/tp/)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "* [1. CAFS Introduction](#introduction)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "* [2. Summary of Contributions](#summary-contribution)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "+ [2.1 Code contribution](#code-contribution)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "  + [2.2 Enhancements implemented](#enhancement-implemented)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "  + [2.3 Contributions to documentation](#contribute-documentation)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "  + [2.4 Contributions to the Developer Guide](#contribute-developerguide)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "  + [2.5 Contributions to team-based tasks](#contribute-team)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "  + [2.6 Review/Mentoring contributions](#review-mentoring)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "  + [2.7 Contributions beyond the project team](#contribute-team)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "* [3. Contributions to the User Guide](#contribute-ug)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "* [4. Contributions to the Developer Guide](#contribute-dg)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "* [5. About me](#about-me)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "\u003ca name\u003d\"introduction\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "### CAFS Introduction "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "Va CLI calender-like task scheduler that supports task and class schedule adding. It is simple to use, and comes with a save function to remember your tasks. The user interacts with the application using a CLI. The project is mainly written in Java."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "\u003ca name\u003d\"summary-contribution\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "### Summary of contributions"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "\u003ca name\u003d\"code-contribution\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "#### Code contribution"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "You can view my code contribution for this project: [RepoSense Dashboard](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dyuchenlichuck\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "\u003ca name\u003d\"enhancement-implemented\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "#### Enhancements implemented"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "- Major Enhancement: added the ability to scedule the task based on the user\u0027s requirement"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "  - Delete Command (almost whole part): delete the task by task index, category, time and date."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "  - Task List (changes): manages the tasks in the list and categoryMap\u0027s process"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "  - Tasks (changes): Create two task types: taskNonClass and Class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "  - List Command (Final version): lists tasks by category, time, date, and mix of them. "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "\u003ca name\u003d\"contribute-documentation\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "#### Contributions to documentations:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "- Documented the majority of the list and delete features and give examples about it."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "- Documented the user guide and development guide."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "- Update About us."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "\u003ca name\u003d\"contribute-developerguide\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "#### Contributions to the DG"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "- Documented a few user stories."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "- Draw the UML of List and Delete."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "\u003ca name \u003d\"#contribute-team\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "#### Contributions to team-based tasks:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "- Refactor the code and create separate parsers and command classes."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "- Added user stories to DG."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "- Maintain the issue tracker for quite a long time and handle all issues / errors raised during the PE dry run."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "\u003ca name\u003d\"review-mentoring\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "#### Review/Mentoring contributions: "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "- Reviewed the following PR\u0027s: [#130](https://github.com/AY1920S2-CS2113-T14-3/tp/pull/130), [#104](https://github.com/AY1920S2-CS2113-T14-3/tp/pull/104), [#162](https://github.com/AY1920S2-CS2113-T14-3/tp/pull/162), [#175](https://github.com/AY1920S2-CS2113-T14-3/tp/pull/175)."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "- Responsiveness on github issue discussion"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "- create the issues to discuss the tasks: [#33](https://github.com/AY1920S2-CS2113-T14-3/tp/issues/33), [#48](https://github.com/AY1920S2-CS2113-T14-3/tp/issues/48), [#55](https://github.com/AY1920S2-CS2113-T14-3/tp/issues/55) , [#128](https://github.com/AY1920S2-CS2113-T14-3/tp/issues/128)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "\u003ca name\u003d\"contribute-team\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "#### Contributions beyond the project team:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "- Reported 6 bugs during the [PE Dry Run](https://github.com/yuchenlichuck/ped/issues)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "\u003ca name\u003d\"contribute-ug\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "### Contributions to the User Guide (Extracts)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "***"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "#### **List** "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "List all tasks"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "* **Usage**: `list`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "#### **List Category**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "List tasks belong to a specific category"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "* **Usage**: `list c/\u003cCATEGORY\u003e`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "#### **List Time** And/Or Date"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "List tasks by specific date/time"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "* **Usage**: `list d/\u003cDATE\u003e t/\u003cTIME\u003e`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "#### List Category \u0026 Time And/Or Date"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "List tasks by category and date and time. "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "* **Usage**: `list c/\u003cCATEGORY\u003e d/\u003cDATE\u003e t/\u003cTIME\u003e`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "#### **Delete a task**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "Delete a task from the list"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "* **Usage**: `delete \u003ctask index\u003e`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "#### **Delete Category**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "Delete tasks belong to a specific category"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "* **Usage**: `delete c/\u003cCATEGORY\u003e`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "#### **Delete Time And/Or Date**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "Delete tasks by specific date/time"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "* **Usage**: `delete d/\u003cDATE\u003e t/\u003cTIME\u003e`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "#### **Delete Category \u0026 Time And/Or Date**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "List tasks by category and date and time. "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "* **Usage**: `delete c/\u003cCATEGORY\u003e d/\u003cDATE\u003e t/\u003cTIME\u003e`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "***"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "\u003ca name\u003d\"contribute-dg\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "### Contributions to the Developer Guide (Extract)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "#### 3.5. Delete by task index (Proposed)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "##### 3.5.1 Proposed Implementation"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "The delete by task index mechanism is facilitated by ListCommand which extends Command."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "Given below is an example usage scenario and how the mechanism behaves at each step."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "Step1: The user adds a task: `add n/2113 c/DEADLINE d/2020-03-30 t/11:59` to add a task."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "Since the user adds a new category `DEADLINE`, the categoryMap will add one more key whose value is the category and the value is the index for this task."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "Step2: The users adds a task: `add n/3145 c/CLASS` to add a class. "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "Since the user adds a new category `CLASS`, the categoryMap wil add one more key whose value is the category and the value is the index for this task."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "Step3: Users list the class he just added by category CLASS: `list c/CLASS`. The TaskList will"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "return the index of the tasks based on the categoryMap. Then the task in the `CLASS` category"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "will be displayed."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "This is the Sequence Diagram for deleting by the task index. "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "![Sequence Diagram for View](../images/deleteCommand_class.jpg)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "\u003ca name\u003d\"about-me\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "### About Me - Li Yuchen"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "**Educational experience**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "- Junior"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "- in the department of Computer Science and Engineering"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "- at Southern University of Science and Technology"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "- Currently conducting semester exchanges at the National University of Singapore and receiving scholarships for overseas study scholarships"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yuchenlichuck": 194
    }
  },
  {
    "path": "src/main/java/seedu/cafs/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.cafs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.tasklist.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": " * Entry point of the CAFS app."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " * Initializes the application and starts the interaction with the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"Foo\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Main constructor to set up required classes and check for data file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public Main() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        storage.checkFolderPath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (storage.checkFileExists()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            // log a message at INFO level"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            // TODO Redirect log messages to log file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            // logger.log(Level.INFO, \"Attempting to read from data file\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            storage.loadFromFile(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        runCommandLoopUntilExitCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Reads the user command and executes it, until the user issues the exit command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private void runCommandLoopUntilExitCommand() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            String userCommandText \u003d ui.readCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            command \u003d new Parser().parseCommand(userCommandText);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                ui.showResultToUser(result);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            } catch (ProjException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                ui.showError(Messages.MESSAGE_DATETIME_ERROR);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                if (e.getMessage().equals(Messages.MESSAGE_PAST_DATE_Error)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                    ui.showError(TAB + Messages.MESSAGE_PAST_DATE_Error);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                } else if (e.getMessage().equals(Messages.MESSAGE_DAY_OR_WEEK)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                    ui.showError(TAB + Messages.MESSAGE_DAY_OR_WEEK);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                    ui.showError(TAB + Messages.MESSAGE_GENERAL_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        } while (!command.isExit());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        logger.log(Level.INFO, \"end of processing\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        new Main().run();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 14,
      "rsanchez-macias": 19,
      "Bencotti": 57
    }
  },
  {
    "path": "src/main/java/seedu/calendar/CalendarParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " * Class to support date and calendar relation methods."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class CalendarParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final int CALENDAR_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    private static final String DATE_FORMAT \u003d \"yyyy/MM/dd\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final SimpleDateFormat format \u003d new SimpleDateFormat(DATE_FORMAT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    private static final DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public CalendarParser() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Constructor to accept user input for month."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param month which month to check calendar"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public CalendarParser(int month) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (month \u003c 0 || month \u003e 12) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            calendar.get(Calendar.MONTH); //set default to current month if any error"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            month -\u003d CALENDAR_OFFSET;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            calendar.set(2020, month, 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Get the first day requested month."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return 0 for Sunday, 6 for Saturday"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public int getFirstDay() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMinimum(Calendar.DAY_OF_MONTH));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return calendar.get(Calendar.DAY_OF_WEEK) - CALENDAR_OFFSET; //Sunday is first day, 1"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Get total number of days for requested month."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return max days in month"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public int getTotalDays() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return calendar.getActualMaximum(Calendar.DAY_OF_MONTH); //Sunday is first day, 1"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Total number of weeks in month."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return number of weeks"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public int getTotalWeeks() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMinimum(Calendar.DAY_OF_MONTH));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return calendar.getActualMaximum(Calendar.WEEK_OF_MONTH);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Check which month is selected."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return number of weeks"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public int getMonth() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Check which month is selected."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return number of weeks"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static LocalDate convertToDate(String userInput) throws DateTimeParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(userInput, dateFormatter);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return localDate;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 2,
      "Bencotti": 86
    }
  },
  {
    "path": "src/main/java/seedu/calendar/GenerateCalendar.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " * Generates a formatted view of a monthy calendar with notifications if a particular day has a task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class GenerateCalendar {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final String VERTICAL_MARK \u003d \"|\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final String JOIN_MARK \u003d \"+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final int SYMBOL_SIZE \u003d 2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final int DAYS_IN_WEEK \u003d 7;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final String PADDING \u003d \" \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final String[] monthName \u003d {\"January\", \"February\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        \"March\", \"April\", \"May\", \"June\", \"July\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        \"August\", \"September\", \"October\", \"November\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        \"December\"};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final String[] HEADING \u003d {\"Sunday\", \"Monday\", \"Tuesday\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"};"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final int COLUMN_SIZE \u003d 7;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final String HORIZONTAL_SEP \u003d \"-\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final String TASK_IN_DAY \u003d \"Items due: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final int DEFAULT_WIDTH \u003d 15;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final String NEW_LINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final String NO_ENTRY \u003d String.format(\"%s%-\" + DEFAULT_WIDTH + \"s\", VERTICAL_MARK, PADDING);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final int CALENDAR_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private int startingDay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private int totalDays;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private int totalWeeks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private int dateCounter \u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private int currentMonth;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private int currentYear;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private String[] tasksInWeek \u003d new String[7];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Constructor to set up internal variables for generating calendar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param startingDay first day the first date of month falls on"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param totalDays how many days in month"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param totalWeeks how many weeks in month"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param currentMonth month selected by user"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param currentYear current year"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public GenerateCalendar(int startingDay, int totalDays, int totalWeeks, int currentMonth, int currentYear) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        this.startingDay \u003d startingDay;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        this.totalDays \u003d totalDays;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        this.totalWeeks \u003d totalWeeks;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        this.currentMonth \u003d currentMonth + CALENDAR_OFFSET;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        this.currentYear \u003d currentYear;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Method to print the calendar and format the frame."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Returns a string containing the lines of the calendar"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public String print() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        // printing header and box around it"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String feedback \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        feedback +\u003d String.format(\"Month is: \" + monthName[currentMonth - CALENDAR_OFFSET] + NEW_LINE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        feedback +\u003d printLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        feedback +\u003d printHeader();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        feedback +\u003d printLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        // first week"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        feedback +\u003d printFirstRow();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        feedback +\u003d printLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        while (dateCounter \u003c\u003d totalDays) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            feedback +\u003d printRow();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            feedback +\u003d printLine();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private String printLine() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String currentLine \u003d \"\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        for (int i \u003d 0; i \u003c COLUMN_SIZE; i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            currentLine +\u003d JOIN_MARK;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            currentLine +\u003d String.join(\"\", Collections.nCopies(DEFAULT_WIDTH, HORIZONTAL_SEP));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentLine +\u003d NEW_LINE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        //the last plus to end the table"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return currentLine;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private String printFirstRow() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        // padding for first week"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String currentWeek \u003d \"\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        for (int i \u003d 0; i \u003c startingDay; i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            currentWeek +\u003d NO_ENTRY;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        // remainder of first week"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        for (int i \u003d startingDay; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            currentWeek +\u003d String.format(\"%s%-\" + DEFAULT_WIDTH + \"d\", VERTICAL_MARK, dateCounter);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            date \u003d LocalDate.of(currentYear,currentMonth, dateCounter);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            int taskCounter \u003d TaskList.categoryCounter(date);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            if (taskCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                tasksInWeek[i] \u003d null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                tasksInWeek[i] \u003d String.valueOf(taskCounter);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            dateCounter++;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentWeek +\u003d VERTICAL_MARK;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentWeek +\u003d NEW_LINE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentWeek \u003d getDailyTasks(currentWeek);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentWeek +\u003d VERTICAL_MARK;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentWeek +\u003d NEW_LINE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return currentWeek;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private String printRow() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String currentWeek \u003d \"\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            if (dateCounter \u003c\u003d totalDays) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                currentWeek +\u003d String.format(\"%s%-\" + DEFAULT_WIDTH + \"d\", VERTICAL_MARK, dateCounter);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                date \u003d LocalDate.of(currentYear,currentMonth, dateCounter);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                int taskCounter \u003d TaskList.categoryCounter(date);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                if (taskCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                    tasksInWeek[i] \u003d null;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                    tasksInWeek[i] \u003d String.valueOf(taskCounter);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                currentWeek +\u003d NO_ENTRY;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            dateCounter++;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentWeek +\u003d VERTICAL_MARK;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentWeek +\u003d NEW_LINE;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentWeek \u003d getDailyTasks(currentWeek);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentWeek +\u003d VERTICAL_MARK;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentWeek +\u003d NEW_LINE;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return currentWeek;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private String getDailyTasks(String currentWeek) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            if (tasksInWeek[i] \u003d\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                currentWeek +\u003d NO_ENTRY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                String calendarInput \u003d TASK_IN_DAY + tasksInWeek[i];"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                currentWeek +\u003d String.format(\"%s%-\" + DEFAULT_WIDTH + \"s\", VERTICAL_MARK, calendarInput);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return currentWeek;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private String printHeader() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String currentLine \u003d \"\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        for (String day : HEADING) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            currentLine +\u003d String.format(\"%s%-\" + DEFAULT_WIDTH + \"s\", VERTICAL_MARK, day);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentLine +\u003d VERTICAL_MARK;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentLine +\u003d NEW_LINE;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return currentLine;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rsanchez-macias": 3,
      "Bencotti": 167
    }
  },
  {
    "path": "src/main/java/seedu/command/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.tasks.TaskNonclass;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.tasks.Class;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import static seedu.common.Constants.CLASS_CATEGORY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_INFO \u003d COMMAND_WORD + \": adds tasks to the list\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \" n/[TITLE] t/[HH:MM-HH:MM] l/[LOCATION] d/[YYYY-MM-DD] \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            + \"i/[INFORMATION] r/[REMINDER] c/[CATEGORY]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Nice! Added the following task to the calendar:\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private static final String MESSAGE_CURRENT_TASKS \u003d \"Now you have %d task/tasks in your list\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private static final String MESSAGE_DELIMITER_ERROR \u003d TAB + \"[Error][Add] \\\"/\\\" is only used in delimiter\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            + \" (e.g. 04/16/2020 is not supported)\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private static final String MESSAGE_MISSING_TITLE \u003d TAB + \"[Error][Add] Please input a title for the task.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public AddCommand(String userInput) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.userInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public CommandResult execute() throws ProjException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        // Check if the user uses / for time/date format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (hasWrongDelimiterPattern(userInput)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            throw new ProjException(MESSAGE_DELIMITER_ERROR);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        //Check if user enters title"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String title \u003d getTitle(userInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (title.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            throw new ProjException(MESSAGE_MISSING_TITLE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String date \u003d getDate(userInput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String description \u003d getDescription(userInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String reminder \u003d getReminder(userInput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String time \u003d getTime(userInput);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String location \u003d getLocation(userInput);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String category \u003d getCategory(userInput).trim().toUpperCase();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        //Check date/time format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        checkDateTimeFormat(date,time);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (category.equals(CLASS_CATEGORY)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            taskList.addTask(new Class(title, description, date.trim(), time, location, reminder, \"CLASS\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            taskList.addTask(new TaskNonclass(title, description, date, time, location, reminder, category));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        Storage.overwriteFile(taskList.getList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String feedback \u003d formatFeedback(taskList.getTask(taskList.getListSize() - 1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assert !title.isEmpty() : \"Task title should contain at least one char\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return new CommandResult(feedback);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private String formatFeedback(Task task) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String feedback \u003d TAB + MESSAGE_SUCCESS + TAB + TAB + TAB + task.toString() + System.lineSeparator()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                + TAB + String.format(MESSAGE_CURRENT_TASKS, taskList.getListSize())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                + System.lineSeparator();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 40,
      "rsanchez-macias": 37,
      "Bencotti": 1
    }
  },
  {
    "path": "src/main/java/seedu/command/CalendarCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.calendar.GenerateCalendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.calendar.CalendarParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class CalendarCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calendar\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_INFO \u003d COMMAND_WORD + \": prints a monthly representation of calendar\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \" n/[OPTIONAL_MONTH]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private final String[] months \u003d {\"January\", \"February\", \"March\", \"April\", \"May\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private final String[] days \u003d {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private int startingDay;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private  int totalDays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private int totalWeeks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private CalendarParser calendar;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    String feedback \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private int checkMonth;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private int currentYear;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final String ARGUMENT_COuNT \u003d \"0 or 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public CalendarCommand(String userInput) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        // parsing user input, if not valid int, set as default month"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if ((userInput !\u003d null) \u0026\u0026 (Parser.isInteger(userInput))) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            checkMonth \u003d Integer.parseInt(userInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            calendar \u003d new CalendarParser(checkMonth);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            calendar \u003d new CalendarParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        checkMonth \u003d calendar.getMonth();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        startingDay \u003d calendar.getFirstDay();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        totalDays \u003d calendar.getTotalDays();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        totalWeeks \u003d calendar.getTotalWeeks();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentYear \u003d calendar.getYear();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        GenerateCalendar gc \u003d new GenerateCalendar(startingDay, totalDays, totalWeeks, checkMonth, currentYear);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        feedback +\u003d gc.print();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return new CommandResult(feedback);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rsanchez-macias": 3,
      "Bencotti": 52
    }
  },
  {
    "path": "src/main/java/seedu/command/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clc\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_INFO \u003d COMMAND_WORD + \": clears the terminal output\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    /** Lines to print to clear out the console. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private static final int LINES_TO_PRINT \u003d 100;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String feedback \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        for (int i \u003d 0; i \u003c LINES_TO_PRINT; i++) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            feedback +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return new CommandResult(feedback);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rsanchez-macias": 25
    }
  },
  {
    "path": "src/main/java/seedu/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    protected TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected static final String TITLE \u003d \"n/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected static final String TIME \u003d \"t/\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected static final String DATE \u003d \"d/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected static final String DESCRIPTION \u003d \"i/\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected static final String LOCATION \u003d \"l/\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected static final String REMINDER \u003d \"r/\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected static final String CATEGORY \u003d \"c/\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Called to check if exit command is given."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return condition whether program should continue looping or exit"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Supplies the objects other commands will call upon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * @param taskList  current instance of tasks and corresponding tasklist methods"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param storage instance of storage object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param ui instance of user interaction object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void setCommandVariables(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Gets the title, if any, from the user input."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return title"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String getTitle(String userInput) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String title \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (userInput.contains(TITLE)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            int index \u003d userInput.indexOf(TITLE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            title \u003d findField(userInput, index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return title;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Gets the description, if any, from the user input."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return description"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String getDescription(String userInput) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (userInput.contains(DESCRIPTION)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            int index \u003d userInput.indexOf(DESCRIPTION);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            description \u003d findField(userInput, index);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return description;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Gets the date, if any, from the user input."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return date"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String getDate(String userInput) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String date \u003d \"\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (userInput.contains(DATE)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            int index \u003d userInput.indexOf(DATE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            date \u003d findField(userInput, index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Gets the reminder, if any, from the user input."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param userInput raw user input."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return reminder."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String getReminder(String userInput) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String reminder \u003d \"\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (userInput.contains(REMINDER)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            int index \u003d userInput.indexOf(REMINDER);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            reminder \u003d findField(userInput, index);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return reminder;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return reminder;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Gets the time in format hh:mm, if any, from the user input."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param userInput raw user input."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return time."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String getTime(String userInput) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String time \u003d \"\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (userInput.contains(TIME)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            int index \u003d userInput.indexOf(TIME);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            time \u003d findField(userInput, index);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return time;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Gets the location, if any, from the user input."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param userInput raw user input."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return location."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String getLocation(String userInput) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String location \u003d \"\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (userInput.contains(LOCATION)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            int index \u003d userInput.indexOf(LOCATION);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            location \u003d findField(userInput, index);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return location;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Gets the category.Default one is TODO."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param userInput raw user input."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return category."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String getCategory(String userInput) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String category \u003d \"\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (userInput.contains(CATEGORY)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            int index \u003d userInput.indexOf(CATEGORY);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            category \u003d findField(userInput, index);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return category;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Scans the raw user input to search for the input."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * for a field (e.g. \"essay\" in event n/essay i/world religions)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param fromIndex index marking the beginning of the field"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return expected field"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    private String findField(String userInput, int fromIndex) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String field \u003d \"\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        char nextField \u003d \u0027/\u0027;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        int i \u003d fromIndex + 2;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        while (i \u003c userInput.length() \u0026\u0026 userInput.charAt(i) !\u003d nextField) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            field +\u003d userInput.charAt(i);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (i \u003c userInput.length() \u0026\u0026 userInput.charAt(i) \u003d\u003d nextField) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return field.substring(0, field.length() - 1);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return field;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Check format for date and time."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param date User input date."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param time User input time."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @throws ProjException Prompt message to advice users how to input the correct format."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected void checkDateTimeFormat(String date, String time) throws ProjException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        // First check: if time follows the format: hh:mm-hh:mm"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (time.length() !\u003d 0) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            String[] timeRanges \u003d time.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            for (String timeRange : timeRanges) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                if (!timeRange.contains(\"-\")) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                    throw new ProjException(TAB + Messages.MESSAGE_INCORRECT_TIME_FORMAT);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                Integer timePointCount \u003d timeRange.split(\"-\").length;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                if (timePointCount !\u003d 2) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                    throw new ProjException(TAB + Messages.MESSAGE_INCORRECT_TIME_FORMAT);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        // Second check: both date and time are inputted"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (date.length() \u003d\u003d 0 | time.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        // Third check: if number of time range match with the number of date"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Integer dateCount \u003d date.split(\"\\\\s+\").length;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Integer timeCount \u003d time.split(\"\\\\s+\").length;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (dateCount !\u003d timeCount) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            throw new ProjException(TAB + Messages.MESSAGE_GENERAL_DATE_TIME_MISMATCH);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * Checks for invalid date/time format: E.g. 2020/07/04."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * / is used in delimiter."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param input userInput string."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return true if there exists \"digit/\" format."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected boolean hasWrongDelimiterPattern(String input) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return input.matches(\".*[0-9]+/.*\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Executes user command processed by parser."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public abstract CommandResult execute() throws ProjException;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 207,
      "rsanchez-macias": 16,
      "Bencotti": 34,
      "yuchenlichuck": 1
    }
  },
  {
    "path": "src/main/java/seedu/command/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private String feedback;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public CommandResult(String feedback) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        this.feedback \u003d feedback;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public String getFeedback() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rsanchez-macias": 15
    }
  },
  {
    "path": "src/main/java/seedu/command/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.calendar.CalendarParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.exception.CommandExceptions.EmptyTaskListException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.exception.CommandExceptions.TaskOutOfBoundsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_INFO \u003d COMMAND_WORD + \": deletes tasks from the list\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            + \" (e.g all tasks or by category)\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \" [TASK_INDEX]\" + System.lineSeparator() + TAB + TAB + TAB"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            + COMMAND_WORD + \" c/[CATEGORY]\" + System.lineSeparator() + TAB + TAB + TAB"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            + COMMAND_WORD + \" d/[YYYY-MM-DD]\" + System.lineSeparator() + TAB + TAB + TAB"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            + COMMAND_WORD + \" t/[HH:MM-HH:MM]\" + System.lineSeparator() + TAB + TAB + TAB"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            + COMMAND_WORD + \" d/[YYYY-MM-DD] t/[HH:MM-HH:MM]\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    private int invalidNumber;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    private static final int INVALID_TIME_RANGE \u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    private static final int INVALID_DATE_RANGE \u003d 2;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    private static final int INVALID_NUMBER \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    private static final int DELETE_ERROR \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    private static final int DELETE_TASK \u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    private static final int DELETE_BY_CATEGORY \u003d 2;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    private static final int DELETE_BY_DATE_CATEGORY \u003d 4;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public DeleteCommand(String userInput) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public CommandResult execute() throws ProjException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String feedback \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String[] commandSections \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            int len \u003d commandSections.length;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            String category \u003d getCategory(userInput).trim().toUpperCase();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            String date \u003d getDate(userInput).trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            String time \u003d getTime(userInput).trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            checkDateTimeFormat(date, time);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            int listCmdSubtype \u003d getCmdSubtype(category, date, time, len);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            //initial the invalid number"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            invalidNumber \u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            checkForEmptyList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            String strIndex \u003d commandSections[1].trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            switch (listCmdSubtype) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            case DELETE_TASK:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                feedback \u003d deleteTask(strIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            case DELETE_BY_CATEGORY:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                feedback \u003d deleteByCategory(category);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            case DELETE_BY_DATE_CATEGORY:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                feedback \u003d deleteByDateCategory(date, time, category);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                feedback \u003d \"[Error][List] No such option to filter\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        } catch (TaskOutOfBoundsException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            feedback \u003d TAB + String.format(Messages.MESSAGE_OUT_OF_BOUNDS, COMMAND_WORD, commandSections[1].trim(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                    taskList.getListSize());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            feedback \u003d TAB + Messages.MESSAGE_MISSING_NUMBER;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            if (invalidNumber \u003d\u003d INVALID_NUMBER) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                feedback \u003d TAB + String.format(Messages.MESSAGE_INVALID_INDEX, COMMAND_WORD, commandSections[1]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            } else if (invalidNumber \u003d\u003d INVALID_TIME_RANGE) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                feedback \u003d TAB + \"[Error][Add/Edit]: Please enter a valid time range: \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                        + \"the end time should be after the start time\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                feedback \u003d TAB + Messages.MESSAGE_PRESENT_OR_FUTURE_DATE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        } catch (EmptyTaskListException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            feedback \u003d TAB + String.format(Messages.MESSAGE_LIST_IS_EMPTY, COMMAND_WORD, COMMAND_WORD);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            feedback \u003d checkForEmptyFeedback(feedback);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            return new CommandResult(feedback);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private String checkForEmptyFeedback(String feedback) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        if (feedback.isEmpty()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            return TAB + Messages.MESSAGE_DELETE_NO_TASK_FOUND;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private void checkForEmptyList() throws EmptyTaskListException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        if (taskList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            throw new EmptyTaskListException();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private void checkForValidIndex(int index) throws TaskOutOfBoundsException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d taskList.getListSize()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            throw new TaskOutOfBoundsException();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private String formatSuccessFeedback(Task removed) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String feedback \u003d \"\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String description \u003d TAB + TAB + removed.toString() + System.lineSeparator();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        description +\u003d String.format(TAB + Messages.MESSAGE_REMAINING_TASKS, taskList.getListSize());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        description +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback \u003d String.format(TAB + Messages.MESSAGE_DELETE_SUCCESS, description);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * delete the tasks by date and/or time"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * in the specific category."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @param date     :"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @param time     :"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @param category :"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @return : java.lang.String"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @author : yuchenlichuck"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @date : 11/4/20 7:06 PM"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    private String deleteByDateCategory(String date, String time, String category)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            throws DateTimeParseException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        //only task can do it just get by date."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String feedback \u003d \"\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        if (time \u003d\u003d null || time.isEmpty()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            String[] dates \u003d date.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            //dates input dates"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            HashSet\u003cLocalDate\u003e inputDates \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            for (String d : dates) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                LocalDate addedDate \u003d CalendarParser.convertToDate(d);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (addedDate.compareTo(LocalDate.now()) \u003c 0) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    invalidNumber \u003d INVALID_DATE_RANGE;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    throw new NumberFormatException(TAB + Messages.MESSAGE_PRESENT_OR_FUTURE_DATE);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                inputDates.add(addedDate);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            for (int m \u003d 0; m \u003c taskList.getListSize(); m++) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                Task task \u003d taskList.getTask(m);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (!category.isEmpty() \u0026\u0026 !task.getCategory().equals(category)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (task.getCategory().equals(\"CLASS\")) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                ArrayList\u003cLocalDate\u003e localDates \u003d task.getDate();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                for (LocalDate d : localDates) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    if (inputDates.contains(d)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                        Task removedTask \u003d taskList.deleteTask(m);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                        storage.overwriteFile(taskList.getList());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                        assert removedTask !\u003d null : \"Removed-task is null\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                        feedback +\u003d formatSuccessFeedback(removedTask) + \"\\n\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                        m--;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        // just get by time"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        if (date.isEmpty()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            String[] times \u003d time.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            ArrayList\u003cLocalTime\u003e startTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            ArrayList\u003cLocalTime\u003e endTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            for (String atime : times) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                String[] timeRange \u003d atime.split(\"-\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (timeRange[1].equals(\"24:00\")) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    timeRange[1] \u003d \"23:59\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                LocalTime startTime \u003d LocalTime.parse(timeRange[0], DateTimeFormatter.ofPattern(\"HH:mm\"));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                LocalTime endTime \u003d LocalTime.parse(timeRange[1], DateTimeFormatter.ofPattern(\"HH:mm\"));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (startTime.isAfter(endTime)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    invalidNumber \u003d INVALID_TIME_RANGE;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    throw new NumberFormatException(TAB + \"[Error][Add/Edit]: Please enter a valid time range: \""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            + \"the end time should be after the start time\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                startTimes.add(startTime);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                endTimes.add(endTime);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            int size \u003d startTimes.size();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.getListSize(); i++) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                Task task \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (!category.isEmpty() \u0026\u0026 !task.getCategory().equals(category)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                ArrayList\u003cLocalTime\u003e localTimes \u003d task.getTime();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                label1:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                for (int j \u003d 0; j \u003c localTimes.size() / 2; j++) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    for (int k \u003d 0; k \u003c size; k++) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                        if (localTimes.get(2 * j).isBefore(endTimes.get(k))"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                                \u0026\u0026 localTimes.get(2 * j + 1).isAfter(startTimes.get(k))) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            Task removedTask \u003d taskList.deleteTask(i);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            storage.overwriteFile(taskList.getList());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            assert removedTask !\u003d null : \"Removed-task is null\";"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            feedback +\u003d formatSuccessFeedback(removedTask) + \"\\n\";"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            i--;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            break label1;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        //date and time"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        if (!date.isEmpty() \u0026\u0026 !time.isEmpty()) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            String[] times \u003d time.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            String[] dates \u003d date.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            ArrayList\u003cLocalTime\u003e startTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            ArrayList\u003cLocalTime\u003e endTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            ArrayList\u003cLocalDate\u003e dateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            for (String atime : times) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                String[] timeRange \u003d atime.split(\"-\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (timeRange[1].equals(\"24:00\")) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    timeRange[1] \u003d \"23:59\";"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                LocalTime startTime \u003d LocalTime.parse(timeRange[0], DateTimeFormatter.ofPattern(\"HH:mm\"));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                LocalTime endTime \u003d LocalTime.parse(timeRange[1], DateTimeFormatter.ofPattern(\"HH:mm\"));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (startTime.isAfter(endTime)) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    invalidNumber \u003d INVALID_TIME_RANGE;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    throw new NumberFormatException(TAB + \"[Error][Add/Edit]: Please enter a valid time range: \""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            + \"the end time should be after the start time\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                startTimes.add(startTime);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                endTimes.add(endTime);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            for (String adate : dates) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                dateList.add(LocalDate.parse(adate, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.getListSize(); i++) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                Task task \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (!category.isEmpty() \u0026\u0026 !task.getCategory().equals(category)) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (task.getCategory().equals(\"CLASS\")) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                ArrayList\u003cLocalTime\u003e localTimes \u003d task.getTime();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                ArrayList\u003cLocalDate\u003e localDates \u003d task.getDate();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                la:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                for (int j \u003d 0; j \u003c localDates.size(); j++) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    for (int k \u003d 0; k \u003c dateList.size(); k++) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                        if (localTimes.get(2 * j).isBefore(endTimes.get(k))"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                                \u0026\u0026 localTimes.get(2 * j + 1).isAfter(startTimes.get(k))"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                                \u0026\u0026 localDates.get(j).equals(dateList.get(k))) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            Task removedTask \u003d taskList.deleteTask(i);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            storage.overwriteFile(taskList.getList());"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            assert removedTask !\u003d null : \"Removed-task is null\";"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            feedback +\u003d formatSuccessFeedback(removedTask) + \"\\n\";"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            i--;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            //break the double loop"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            break la;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     *delete the tasks by category"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     *with the specific category."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @return : java.lang.String"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @author : yuchenlichuck"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @date : 11/4/20 7:06 PM"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    private String deleteByCategory(String category) throws ProjException {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        if (!taskList.containsCategory(category)) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            ui.showAllCategory(taskList.getAllCategory());"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            throw new ProjException(TAB + \"There is no \" + category + \" in current category.\\n\""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    + Ui.DIVIDER);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String feedback \u003d \"\";"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getListSize(); i++) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            if (taskList.getTask(i).getCategory().equals(category)) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                Task removedTask \u003d taskList.deleteTask(i);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                storage.overwriteFile(taskList.getList());"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                i--;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                assert removedTask !\u003d null : \"Removed-task is null\";"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                feedback +\u003d formatSuccessFeedback(removedTask) + \"\\n\";"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * Delete task by the strIndex."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @param strIndex :"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @return : java.lang.String"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @author : yuchenlichuck"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @date : 11/4/20 7:07 PM"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    private String deleteTask(String strIndex) throws TaskOutOfBoundsException {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        int index \u003d Integer.parseInt(strIndex) - 1;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        checkForValidIndex(index);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        assert index \u003c taskList.getListSize() : \"index \u003e the size of taskList\";"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Task removedTask \u003d taskList.deleteTask(index);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        storage.overwriteFile(taskList.getList());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        return formatSuccessFeedback(removedTask);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * get cmd sub type."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @param category :"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @param date     :"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @param time     :"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @param len      :"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @return : int"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @author : yuchenlichuck"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @date : 11/4/20 7:04 PM"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    private int getCmdSubtype(String category, String date, String time, int len) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        if (date.isEmpty() \u0026\u0026 time.isEmpty() \u0026\u0026 !category.isEmpty()) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            return DELETE_BY_CATEGORY;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        if (!(date.isEmpty() \u0026\u0026 time.isEmpty())) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            return DELETE_BY_DATE_CATEGORY;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        if (len \u003d\u003d 2 \u0026\u0026 (date.isEmpty() \u0026\u0026 time.isEmpty() \u0026\u0026 category.isEmpty())) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            return DELETE_TASK;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        return DELETE_ERROR;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rsanchez-macias": 85,
      "yuchenlichuck": 314
    }
  },
  {
    "path": "src/main/java/seedu/command/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.tasks.Class;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.tasks.TaskNonclass;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import static seedu.common.Constants.NEW_LINE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import static seedu.common.Constants.TASKLIST_OFFSET;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " * Allows users to mark a task as complete and displays back to them the change."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final String COMMAND_INFO \u003d COMMAND_WORD + \": changes the status of task to completed\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \" [TASK_INDEX]\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String ARGUMENT_COUNT \u003d \"1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private String feedback \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private String indexCompleteTask;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public DoneCommand(String indexCompleteTask) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        this.indexCompleteTask \u003d indexCompleteTask;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public CommandResult execute() throws ProjException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            Boolean checkValidNumber \u003d Parser.isInteger(indexCompleteTask);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            if (!checkValidNumber) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                feedback +\u003d TAB + \"[Error][Done] Please insert a valid positive number\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                return new CommandResult(feedback);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            int indexComplete \u003d Integer.parseInt(indexCompleteTask);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            if (indexComplete \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                feedback +\u003d TAB + \"[Error][Done] List numbering starts from 1\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                return new CommandResult(feedback);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assert indexComplete \u003e 0 : \"[Error][Done] user input is less than 0, not valid\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            if (taskList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                feedback +\u003d TAB + \"[Alert][Done]: There are no tasks to mark completed!\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                return new CommandResult(feedback);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            Task task \u003d taskList.getTask(indexComplete - TASKLIST_OFFSET);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            if (task instanceof Class) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                feedback +\u003d TAB + \"[Alert][Done]: Done command does not operate on [CLASS] category.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            // only allow users to complete a non class task object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            if (task instanceof TaskNonclass) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                TaskNonclass taskNonClass \u003d (TaskNonclass) task;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                if (!taskNonClass.getDoneStatus()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                    markAsDone(taskNonClass);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                    feedback +\u003d TAB + \"[Alert][Done]: Task is already done\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            feedback \u003d TAB + \"[Error][Done]: Please input a task within the range of: 1 - \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                    + taskList.getList().size() + System.lineSeparator();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            return  new CommandResult(feedback);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return new CommandResult(feedback);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private void markAsDone(TaskNonclass task) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        feedback +\u003d TAB + \"Task marked as done: \" + NEW_LINE + TAB + TAB;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        feedback +\u003d \"[\" + ((TaskNonclass) task).getStatusIcon() + \"] \" + task + \"\\n\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        Storage.overwriteFile(taskList.getList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rsanchez-macias": 5,
      "Bencotti": 85
    }
  },
  {
    "path": "src/main/java/seedu/command/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import static seedu.common.Constants.CLASS_CATEGORY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    private String taskEdited;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_INFO \u003d COMMAND_WORD + \": edits the specified task\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \" TASK_INDEX t/[HH:MM-HH:MM] l/[LOCATION] \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            + \"d/[YYYY-MM-DD] i/[INFORMATION] r/[REMINDER] c/[CATEGORY]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public EditCommand(String userInput) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Checks if a string can be casted to a number."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param str input string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return true if it can be casted."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public static boolean isNumeric(String str) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            Integer.parseInt(str);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Checks if the user has input that field."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param input a field."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return true if user has input that field."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    private Boolean hasInput(String input) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (input.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Edit a task by the task index number."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Cannot edit title of a class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return result of command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @throws ProjException if input invalid task index."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public CommandResult execute() throws ProjException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Boolean isEdit \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String[] commandSections \u003d this.userInput.split(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (commandSections.length \u003c 2) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            throw new ProjException(TAB + Messages.MESSAGE_EDIT_MISSING_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.taskEdited \u003d commandSections[1];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (!isNumeric(taskEdited.trim())) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            throw new ProjException(TAB + Messages.MESSAGE_EDIT_MISSING_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Integer taskEdited \u003d Integer.parseInt(this.taskEdited.trim()) - 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        if (taskEdited \u003c 0 || taskEdited \u003e\u003d taskList.getListSize()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            throw new ProjException(TAB + String.format(Messages.MESSAGE_EDIT_OUT_OF_BOUNDS, (taskEdited + 1)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String title \u003d getTitle(userInput);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (hasInput(title)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            throw new ProjException(TAB + Messages.MESSAGE_EDIT_TITLE_ERROR);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String description \u003d getDescription(userInput);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (hasInput(description)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            taskList.changeDescription(taskEdited,description);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            isEdit \u003d true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String reminder \u003d getReminder(userInput);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (hasInput(reminder)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            taskList.changeReminder(taskEdited,reminder);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            isEdit \u003d true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        //When both date and time are inputted, need to check the matching format."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String date \u003d getDate(userInput);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String time \u003d getTime(userInput);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        checkDateTimeFormat(date,time);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (hasInput(date) \u0026 hasInput(time)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            taskList.changeDate(taskEdited,date);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            taskList.changeTime(taskEdited,time);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            isEdit \u003d true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        //When only either date/time is inputted, need to check if date\u0026time match after modifying."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (hasInput(date) \u0026 !hasInput(time)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            if (taskList.getTask(taskEdited).getTime().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                // When previously no time is set by user so it is okay to edit the number of date"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                taskList.changeDate(taskEdited, date);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                isEdit \u003d true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            } else if (date.split(\"\\\\s+\").length !\u003d taskList.getTask(taskEdited).getTime().size() / 2) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                throw new ProjException(TAB + Messages.MESSAGE_EDIT_DATE_TIME_MISMATCH);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                taskList.changeDate(taskEdited, date);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                isEdit \u003d true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (hasInput(time) \u0026 !hasInput(date)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            if (!taskList.getTask(taskEdited).isDateSetByUser()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                // When previously no date is set by user so it is okay to edit the number of time"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                taskList.changeTime(taskEdited,time);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                isEdit \u003d true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            } else if (time.split(\"\\\\s+\").length !\u003d taskList.getTask(taskEdited).getDate().size()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                throw new ProjException(TAB + Messages.MESSAGE_EDIT_DATE_TIME_MISMATCH);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                taskList.changeTime(taskEdited,time);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                isEdit \u003d true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String location \u003d getLocation(userInput);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (hasInput(location)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            taskList.changeLocation(taskEdited,location);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            isEdit \u003d true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String category \u003d getCategory(userInput).trim().toUpperCase();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (hasInput(category)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            //If it is class, cannot change to task. If it is task, cannot change to class."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            if (category.equals(CLASS_CATEGORY)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                throw new ProjException(TAB + Messages.MESSAGE_TASK_TO_CLASS_ERROR);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            } else if (taskList.getTask(taskEdited).getCategory().equals(CLASS_CATEGORY)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                throw new ProjException(TAB + Messages.MESSAGE_CLASS_TO_TASK_ERROR);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            taskList.changeCategory(taskEdited,category);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            isEdit \u003d true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        //post condition for checking no title input."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assert (!hasInput(title));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (isEdit) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            String feedback \u003d TAB + \"Task \" + (taskEdited + 1) + \" edited\\n\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            feedback +\u003d TAB + TAB + taskList.getTask(taskEdited).toString() + \"\\n\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            Storage.overwriteFile(taskList.getList());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return new CommandResult(feedback);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            throw new ProjException(TAB + Messages.MESSAGE_NO_TASK_MODIFIED);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 129,
      "rsanchez-macias": 37
    }
  },
  {
    "path": "src/main/java/seedu/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": " * Sends the exit signal to main loop, program is exited after this command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_INFO \u003d COMMAND_WORD + \": exits the program\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String ERROR_FEEDBACK \u003d \"No arguments required\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Check if exit command is given."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return signal to main loop that program will be terminated"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        return new CommandResult(Messages.BYE_MESSAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "rsanchez-macias": 9,
      "Bencotti": 18,
      "yuchenlichuck": 3
    }
  },
  {
    "path": "src/main/java/seedu/command/FailedCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.common.Constants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class FailedCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private String feedback \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final String WRONG_ARGUMENT \u003d \"Wrong number of arguments\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Constructor method for custom error message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param commandName command name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param feedback message to display"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public FailedCommand(String commandName, String feedback) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        this.feedback +\u003d String.format(TAB + \"[Error][%s]: \", commandName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        this.feedback +\u003d feedback;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        this.feedback +\u003d Constants.NEW_LINE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Constructor method for wrong argument count, used in parser class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param commandName command name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param userArgumentCount arguments user arguments"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param expectedCount expected arguments for command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public FailedCommand(String commandName, int userArgumentCount, String expectedCount) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d String.format(TAB + \"[Error][%s]: %s,\\n\" + TAB + \"Received: %d Expected: %s\\n\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                commandName, WRONG_ARGUMENT, userArgumentCount, expectedCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public CommandResult execute() throws ProjException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return new CommandResult(feedback);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rsanchez-macias": 7,
      "Bencotti": 35
    }
  },
  {
    "path": "src/main/java/seedu/command/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.exception.CommandExceptions.FindEmptyPatternException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private String pattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_INFO \u003d COMMAND_WORD + \": finds tasks with given pattern\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \" [PATTERN]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public FindCommand(String pattern) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        this.pattern \u003d pattern.trim().substring(4).trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String feedback \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            if (pattern.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                throw new FindEmptyPatternException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            ArrayList\u003cTask\u003e tasks \u003d taskList.findTasks(pattern);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                feedback +\u003d TAB + String.format(Messages.MESSAGE_NO_FOUND, pattern);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                feedback \u003d formatFeedback(tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        } catch (FindEmptyPatternException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            feedback \u003d TAB + Messages.MESSAGE_EMPTY_PATTERN;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            return new CommandResult(feedback);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private String formatFeedback(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String list \u003d \"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String feedback \u003d TAB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            list +\u003d TAB + TAB + (i + 1) + \". \" + tasks.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d String.format(Messages.MESSAGE_SUCCESS, list);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rsanchez-macias": 62,
      "yuchenlichuck": 1
    }
  },
  {
    "path": "src/main/java/seedu/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String HELP_LEGEND \u003d TAB + \"Legend:\\n\" + TAB + TAB + TAB + \"[Y]: Task is completed\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            + TAB + TAB + TAB +  \"[N]: Task is not completed\\n\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private String feedback \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        // default constructor"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public HelpCommand(String feedback) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        this.feedback +\u003d TAB + feedback;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d HELP_LEGEND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d TAB + \"Command List:\\n\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d TAB + TAB + AddCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d TAB + TAB + \"Usage: \" + AddCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d TAB + TAB + EditCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d TAB + TAB + \"Usage: \" + EditCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d TAB + TAB + ListCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d TAB + TAB + \"Usage: \" + System.lineSeparator() + TAB + TAB + TAB"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            + ListCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d TAB + TAB + DeleteCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d TAB + TAB + \"Usage: \"  + System.lineSeparator() + TAB + TAB + TAB"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                + DeleteCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d TAB + TAB + DoneCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d TAB + TAB + \"Usage: \" + DoneCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d TAB + TAB + FindCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d TAB + TAB + \"Usage: \" + FindCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d TAB + TAB + CalendarCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d TAB + TAB + \"Usage: \" + CalendarCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d TAB + TAB + ClearCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d TAB + TAB + \"Usage: \" + ClearCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d TAB + TAB + ExitCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d TAB + TAB + \"Usage: \" + ExitCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return new CommandResult(feedback);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rsanchez-macias": 62,
      "Bencotti": 8
    }
  },
  {
    "path": "src/main/java/seedu/command/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.calendar.CalendarParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.exception.CommandExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.tasks.Class;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.tasks.TaskNonclass;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.tasks.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final int TASKLIST_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    private static final int LIST_ALL \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    private static final int LIST_BY_CATEGORY \u003d 2;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    private static final int LIST_BY_DATE \u003d 3;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    private static final int LIST_BY_DATE_CATEGORY \u003d 4;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_INFO \u003d COMMAND_WORD + \": lists tasks (e.g all tasks or by category)\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + System.lineSeparator() + TAB + TAB + TAB"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            + COMMAND_WORD + \" c/[CATEGORY]\" + System.lineSeparator() + TAB + TAB + TAB"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            + COMMAND_WORD + \" d/[YYYY-MM-DD]\" + System.lineSeparator() + TAB + TAB + TAB"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            + COMMAND_WORD + \" t/[HH:MM-HH:MM]\" + System.lineSeparator() + TAB + TAB + TAB"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            + COMMAND_WORD + \" d/[YYYY-MM-DD] t/[HH:MM-HH:MM]\" + System.lineSeparator() + TAB + TAB + TAB"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            + COMMAND_WORD + \" c/[CATEGORY] d/[YYYY-MM-DD] t/[HH:MM-HH:MM]\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private static final String MESSAGE_EMPTY_LIST \u003d \"[Alert][list] List is empty\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public ListCommand(String userCommand) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.userInput \u003d userCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public CommandResult execute() throws ProjException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String feedback \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        ArrayList\u003cInteger\u003e listTaskIndex \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String category \u003d getCategory(userInput).trim().toUpperCase();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String date \u003d getDate(userInput).trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String time \u003d getTime(userInput).trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        checkDateTimeFormat(date,time);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            if (taskList.getListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                throw new CommandExceptions.EmptyTaskListException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            int listCmdSubtype \u003d getCmdSubtype(category, date, time);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            switch (listCmdSubtype) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            case LIST_ALL:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                getWholeList(listTaskIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            case LIST_BY_CATEGORY:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                getListByCategory(listTaskIndex, category);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            case LIST_BY_DATE:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                getListByDate(listTaskIndex, date, time);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            case LIST_BY_DATE_CATEGORY:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                getListByDateCategory(listTaskIndex, date, time, category);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                // Should not reach here"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                feedback \u003d \"[Error][List] No such option to filter\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            feedback \u003d getFormattedFeedback(listTaskIndex);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        } catch (CommandExceptions.EmptyTaskListException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            feedback \u003d TAB + MESSAGE_EMPTY_LIST;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return new CommandResult(feedback);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * list the tasks by date and/or time"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * in the specific category."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @author : yuchenlichuck"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @date : 11/4/20 7:04 PM"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @param listTaskIndex :"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @param date :"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @param time :"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @param category :"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @return : void"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    private void getListByDateCategory(ArrayList\u003cInteger\u003e listTaskIndex, String date, String time, String category)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            throws DateTimeParseException, NumberFormatException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        //only task can do it and date can do"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        if (time \u003d\u003d null || time.isEmpty()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            String[] dates \u003d date.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            //dates input dates"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            HashSet\u003cLocalDate\u003e inputDates \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            for (String d : dates) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                LocalDate addedDate \u003d CalendarParser.convertToDate(d);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (addedDate.compareTo(LocalDate.now()) \u003c 0) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                    throw new NumberFormatException(TAB + Messages.MESSAGE_PRESENT_OR_FUTURE_DATE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                inputDates.add(addedDate);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            int index \u003d -1;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            for (Task task : taskList.getList()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (!task.getCategory().equals((category))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (task.getCategory().equals(\"CLASS\")) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                ArrayList\u003cLocalDate\u003e localDates \u003d task.getDate();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                for (LocalDate d : localDates) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    if (inputDates.contains(d)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                        listTaskIndex.add(index);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                // Populate the date with current date if date is not inputted"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        //time range"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        if (date.isEmpty()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            String[] times \u003d time.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            ArrayList\u003cLocalTime\u003e startTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            ArrayList\u003cLocalTime\u003e endTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            for (String atime : times) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                String[] timeRange \u003d atime.split(\"-\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (timeRange[1].equals(\"24:00\")) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    timeRange[1] \u003d \"23:59\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                LocalTime startTime \u003d LocalTime.parse(timeRange[0], DateTimeFormatter.ofPattern(\"HH:mm\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                LocalTime endTime \u003d LocalTime.parse(timeRange[1], DateTimeFormatter.ofPattern(\"HH:mm\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (startTime.isAfter(endTime)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    throw new NumberFormatException(TAB + \"[Error][Add/Edit]: Please enter a valid time range: \""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            + \"the end time should be after the start time\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                //input time"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                startTimes.add(startTime);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                endTimes.add(endTime);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            int size \u003d startTimes.size();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.getListSize(); i++) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                Task task \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (!task.getCategory().equals((category))) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                ArrayList\u003cLocalTime\u003e localTimes \u003d task.getTime();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                label:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                for (int j \u003d 0; j \u003c localTimes.size() / 2; j++) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    for (int k \u003d 0; k \u003c size; k++) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                        if (localTimes.get(2 * j).isBefore(endTimes.get(k))"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                                \u0026\u0026 localTimes.get(2 * j + 1).isAfter(startTimes.get(k))) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            listTaskIndex.add(i);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            break label;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        //date and time"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        if (!date.isEmpty() \u0026\u0026 !time.isEmpty()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            String[] dates \u003d date.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            String[] times \u003d time.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            ArrayList\u003cLocalTime\u003e startTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            ArrayList\u003cLocalTime\u003e endTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            ArrayList\u003cLocalDate\u003e dateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            for (String atime : times) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                String[] timeRange \u003d atime.split(\"-\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (timeRange[1].equals(\"24:00\")) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    timeRange[1] \u003d \"23:59\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                LocalTime startTime \u003d LocalTime.parse(timeRange[0], DateTimeFormatter.ofPattern(\"HH:mm\"));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                LocalTime endTime \u003d LocalTime.parse(timeRange[1], DateTimeFormatter.ofPattern(\"HH:mm\"));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (startTime.isAfter(endTime)) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    throw new NumberFormatException(TAB + \"[Error][Add/Edit]: Please enter a valid time range: \""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            + \"the end time should be after the start time\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                startTimes.add(startTime);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                endTimes.add(endTime);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            for (String adate : dates) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                dateList.add(LocalDate.parse(adate, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            //dates input dates"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.getListSize(); i++) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                Task task \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (!task.getCategory().equals((category))) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (task.getCategory().equals(\"CLASS\")) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                ArrayList\u003cLocalTime\u003e localTimes \u003d task.getTime();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                ArrayList\u003cLocalDate\u003e localDates \u003d task.getDate();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                label:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                for (int j \u003d 0; j \u003c localDates.size(); j++) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    for (int k \u003d 0; k \u003c dateList.size(); k++) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                        if (localTimes.get(2 * j).isBefore(endTimes.get(k))"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                                \u0026\u0026 localTimes.get(2 * j + 1).isAfter(startTimes.get(k))"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                                \u0026\u0026 localDates.get(j).equals(dateList.get(k))) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            listTaskIndex.add(i);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            break label;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * list the tasks by date and/or time"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * in all categories."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @author : yuchenlichuck"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @date : 11/4/20 7:03 PM"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @param listTaskIndex :"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @param date :"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @param time :"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @return : void"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    private void getListByDate(ArrayList\u003cInteger\u003e listTaskIndex, String date, String time)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            throws DateTimeParseException, NumberFormatException {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        //only task can do it"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        if (time \u003d\u003d null || time.isEmpty()) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            String[] dates \u003d date.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            //dates input dates"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            HashSet\u003cLocalDate\u003e inputDates \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            for (String d : dates) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                LocalDate addedDate \u003d CalendarParser.convertToDate(d);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (addedDate.compareTo(LocalDate.now()) \u003c 0) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                    throw new NumberFormatException(TAB + Messages.MESSAGE_PRESENT_OR_FUTURE_DATE);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                inputDates.add(addedDate);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            int index \u003d -1;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            for (Task task : taskList.getList()) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (task.getCategory().equals(\"CLASS\")) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                ArrayList\u003cLocalDate\u003e localDates \u003d task.getDate();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                for (LocalDate d : localDates) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    if (inputDates.contains(d)) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                        listTaskIndex.add(index);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                // Populate the date with current date if date is not inputted"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        if (date.isEmpty()) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            String[] times \u003d time.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            ArrayList\u003cLocalTime\u003e startTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            ArrayList\u003cLocalTime\u003e endTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            for (String atime : times) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                String[] timeRange \u003d atime.split(\"-\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (timeRange[1].equals(\"24:00\")) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    timeRange[1] \u003d \"23:59\";"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                LocalTime startTime \u003d LocalTime.parse(timeRange[0], DateTimeFormatter.ofPattern(\"HH:mm\"));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                LocalTime endTime \u003d LocalTime.parse(timeRange[1], DateTimeFormatter.ofPattern(\"HH:mm\"));"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (timeRange[1].equals(\"24:00\")) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    timeRange[1] \u003d \"23:59\";"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (startTime.isAfter(endTime)) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    throw new NumberFormatException(TAB + \"[Error][Add/Edit]: Please enter a valid time range: \""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            + \"the end time should be after the start time\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                startTimes.add(startTime);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                endTimes.add(endTime);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            int size \u003d startTimes.size();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.getListSize(); i++) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                Task task \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                ArrayList\u003cLocalTime\u003e localTimes \u003d task.getTime();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                label:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                for (int j \u003d 0; j \u003c localTimes.size() / 2; j++) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    for (int k \u003d 0; k \u003c size; k++) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                        if (localTimes.get(2 * j).isBefore(endTimes.get(k))"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                                \u0026\u0026 localTimes.get(2 * j + 1).isAfter(startTimes.get(k))) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            listTaskIndex.add(i);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            break label;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        //date and time"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        if (!date.isEmpty() \u0026\u0026 !time.isEmpty()) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            String[] dates \u003d date.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            String[] times \u003d time.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            ArrayList\u003cLocalTime\u003e startTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            ArrayList\u003cLocalTime\u003e endTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            ArrayList\u003cLocalDate\u003e dateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            for (String atime : times) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                String[] timeRange \u003d atime.split(\"-\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (timeRange[1].equals(\"24:00\")) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    timeRange[1] \u003d \"23:59\";"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                LocalTime startTime \u003d LocalTime.parse(timeRange[0], DateTimeFormatter.ofPattern(\"HH:mm\"));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                LocalTime endTime \u003d LocalTime.parse(timeRange[1], DateTimeFormatter.ofPattern(\"HH:mm\"));"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (startTime.isAfter(endTime)) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    throw new NumberFormatException(TAB + \"[Error][Add/Edit]: Please enter a valid time range: \""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            + \"the end time should be after the start time\");"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                startTimes.add(startTime);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                endTimes.add(endTime);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            for (String adate : dates) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                dateList.add(LocalDate.parse(adate, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")));"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            //dates input dates"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            int size \u003d dates.length;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.getListSize(); i++) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                Task task \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                if (task.getCategory().equals(\"CLASS\")) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                ArrayList\u003cLocalDate\u003e localDates \u003d task.getDate();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                ArrayList\u003cLocalTime\u003e localTimes \u003d task.getTime();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                label:"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                for (int j \u003d 0; j \u003c localDates.size(); j++) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    for (int k \u003d 0; k \u003c dateList.size(); k++) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                        if (localTimes.get(2 * j).isBefore(endTimes.get(k))"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                                \u0026\u0026 localTimes.get(2 * j + 1).isAfter(startTimes.get(k))"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                                \u0026\u0026 localDates.get(j).equals(dateList.get(k))) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                            listTaskIndex.add(i);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                            break label;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * list the tasks by the sequence"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * in the whole tasklists."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @author : yuchenlichuck"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @date : 11/4/20 7:03 PM"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @param listTaskIndex :"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @return : void"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private void getWholeList(ArrayList\u003cInteger\u003e listTaskIndex) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getListSize(); i++) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            listTaskIndex.add(i);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private String getFormattedFeedback(ArrayList\u003cInteger\u003e listTaskIndex) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String feedback;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        if (listTaskIndex.size() \u003d\u003d 0 || listTaskIndex.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            feedback \u003d TAB + \"There are \" + listTaskIndex.size() + \" task.\\n\";"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            feedback \u003d TAB + \"There are \" + listTaskIndex.size() + \" tasks.\\n\";"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        for (int i \u003d 0; i \u003c listTaskIndex.size(); i++) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            Integer taskIndex \u003d listTaskIndex.get(i);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            Task task \u003d taskList.getTask(taskIndex);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            if (task instanceof TaskNonclass) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                feedback +\u003d TAB + TAB + (i + TASKLIST_OFFSET) + \". \";"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                feedback +\u003d \"[\" + ((TaskNonclass) task).getStatusIcon() + \"] \" + task + \"\\n\";"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            if (task instanceof Class) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                feedback +\u003d TAB + TAB + (i + TASKLIST_OFFSET) + \". \";"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                feedback +\u003d \"[\" + ((Class) task).getStatusIcon() + \"] \" + task + \"\\n\";"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * get the list of the"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * task list by"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * the specific category."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @param listTaskIndex :"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @param category :"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @return : void"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @author yuchenlichuck"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @creed: Talk is cheap,show me the code"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @date 11/4/20 6:59 PM"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private void getListByCategory(ArrayList\u003cInteger\u003e listTaskIndex, String category) throws ProjException {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        if (!taskList.containsCategory(category)) {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            ui.showAllCategory(taskList.getAllCategory());"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            throw new ProjException(TAB + \"[Alert][list] There is no \\\"\" + category + \"\\\" in current category.\\n\");"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        for (Task task : taskList.getList()) {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            if (task.getCategory().equals(category)) {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                listTaskIndex.add(index);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    private int getCmdSubtype(String category, String date, String time) {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        if (date.isEmpty() \u0026\u0026 time.isEmpty() \u0026\u0026 !category.isEmpty()) {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            return LIST_BY_CATEGORY;"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        if (!(date.isEmpty() \u0026\u0026 time.isEmpty()) \u0026\u0026 category.isEmpty()) {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            return LIST_BY_DATE;"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        if (!(date.isEmpty() \u0026\u0026 time.isEmpty()) \u0026\u0026 !category.isEmpty()) {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            return LIST_BY_DATE_CATEGORY;"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return LIST_ALL;"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 23,
      "rsanchez-macias": 101,
      "Bencotti": 8,
      "yuchenlichuck": 378
    }
  },
  {
    "path": "src/main/java/seedu/common/Constants.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "package seedu.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "public final class Constants {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public static final String DEFAULT_CATEGORY \u003d \"TODO\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final int TASKLIST_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String TAB \u003d \"  \";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final String NEW_LINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public static final String CLASS_CATEGORY \u003d \"CLASS\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 6,
      "rsanchez-macias": 1,
      "Bencotti": 2
    }
  },
  {
    "path": "src/main/java/seedu/common/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": " * Container class for repeated static Strings."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    /** Messages for find command. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Found the followings tasks:\\n%s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String MESSAGE_EMPTY_PATTERN \u003d \"[Error][find] Please enter a pattern to look for \\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String MESSAGE_NO_FOUND \u003d \"[Alert][find] No tasks found with \\\"%s\\\" in their title, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            + \"description, or location\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    /** Messages for delete command. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String MESSAGE_MISSING_NUMBER \u003d \"[Error][delete] Missing task number to delete\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public static final String MESSAGE_DELETE_SUCCESS \u003d \"The following task has been removed:\\n %s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String MESSAGE_DELETE_NO_TASK_FOUND \u003d \"[Alert][delete] No task found to delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    /** Messages for list command. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String MESSAGE_LIST_IS_EMPTY \u003d \"[Alert][%s] There is nothing to %s, the list is empty\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String MESSAGE_OUT_OF_BOUNDS \u003d \"[Error][%s] Task number \\\"%s\\\" doesn\u0027t exit. There are %s\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            + \" task/tasks in the list\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String MESSAGE_PRESENT_OR_FUTURE_DATE \u003d \"[Alert][list] Please enter a present or future date\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /** Messages for add command. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public static final String MESSAGE_PAST_DATE_Error \u003d \"[Alert][add] Not allowed to add task \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            + \"in the past\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public static final String MESSAGE_DAY_OR_WEEK \u003d \"[Error][add] Integer that represents day\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            + \" of week must within 1 to 7\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    /** Messages for edit command. */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String MESSAGE_EDIT_MISSING_INDEX \u003d \"[Error][edit] Missing task number to edit \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            + \"(e.g: edit 2 r/reminder)\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String MESSAGE_EDIT_TITLE_ERROR \u003d \"[Alert][edit] Not allowed to change title\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String MESSAGE_TASK_TO_CLASS_ERROR \u003d \"[Alert][edit] Not allowed to change from \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            + \"other categories to CLASS category\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String MESSAGE_CLASS_TO_TASK_ERROR \u003d \"[Alert][edit] Not allowed to change from \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            + \"CLASS category to other category\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String MESSAGE_NO_TASK_MODIFIED \u003d \"[Alert][edit] No task has been edited\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            + \" (No valid field input)\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String MESSAGE_EDIT_DATE_TIME_MISMATCH \u003d \"[Alert][edit] The number of time range must match \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            + \"with the number of date(day of a week).\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String MESSAGE_EDIT_OUT_OF_BOUNDS \u003d \"[Error][edit] Task number \\\"%s\\\" doesn\u0027t exit\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    /** General messages. */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String MESSAGE_REMAINING_TASKS \u003d \"Now you have %d task/tasks in your calendar\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"[Error][%s] The entered index \\\"%s\\\" is invalid. \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            + \"Please enter a valid task number\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String MESSAGE_DATETIME_ERROR \u003d TAB + \"[Error] Expected format for date/time:\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            + \" yyyy-mm-dd; time: hh:mm\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND \u003d \"[Alert] Command \\\"%s\\\" not recognized\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String MESSAGE_GENERAL_DATE_TIME_MISMATCH \u003d \"[Alert] The number of time range must match \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            + \"with the number of date(day of a week).\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String MESSAGE_INCORRECT_TIME_FORMAT \u003d \"[Alert] Please follow the format when input \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            + \"time: hh:mm-hh:mm\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String MESSAGE_END_BEFORE_START_TIME \u003d \"[Error][Add/Edit]: Please enter a valid time range: \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            + \"the end time should be after the start time\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String MESSAGE_GENERAL_ERROR_MESSAGE \u003d \"[Error] Unexpected input for parameter\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    /** Farewell message. */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String BYE_MESSAGE \u003d \"CAFS: Bye, hope to see you again!\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 6,
      "rsanchez-macias": 49,
      "Bencotti": 6,
      "yuchenlichuck": 4
    }
  },
  {
    "path": "src/main/java/seedu/exception/CommandExceptions.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import java.lang.reflect.Executable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "public class CommandExceptions extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static class FindEmptyPatternException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        public FindEmptyPatternException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static class TaskOutOfBoundsException extends Exception {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        public TaskOutOfBoundsException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static class EmptyTaskListException extends Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        public EmptyTaskListException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rsanchez-macias": 28
    }
  },
  {
    "path": "src/main/java/seedu/exception/ProjException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "public class ProjException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public ProjException(String error) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 7,
      "rsanchez-macias": 2
    }
  },
  {
    "path": "src/main/java/seedu/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.CalendarCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.ClearCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.FailedCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.common.Constants;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.common.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final int COMMAND_LENGTH \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param userCommand user input including command word and parameters"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return  command based on user input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static Command parseCommand(String userCommand) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String[] commandSections \u003d userCommand.split(\" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String command \u003d commandSections[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return new ListCommand(userCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return new DeleteCommand(userCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return new AddCommand(userCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            return new FindCommand(userCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return new EditCommand(userCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            if (commandSections.length !\u003d COMMAND_LENGTH) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                return new FailedCommand(ExitCommand.COMMAND_WORD,ExitCommand.ERROR_FEEDBACK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            if (commandSections.length \u003c 2 || commandSections.length \u003e 2) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                return new FailedCommand(DoneCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                        commandSections.length - COMMAND_LENGTH, DoneCommand.ARGUMENT_COUNT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            return new DoneCommand(commandSections[1]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        case CalendarCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            if (commandSections.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                return new CalendarCommand(commandSections[1]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            if (commandSections.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                return new CalendarCommand(null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            return new FailedCommand(CalendarCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                    commandSections.length - COMMAND_LENGTH, CalendarCommand.ARGUMENT_COuNT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            return new HelpCommand(String.format(Messages.MESSAGE_INVALID_COMMAND + Constants.NEW_LINE, command));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Check if String is a valid integer."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param value Input string for checking"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return boolean if string is valid"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static boolean isInteger(String value) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        for (char c : value.toCharArray()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            if (!Character.isDigit(c)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 4,
      "rsanchez-macias": 28,
      "Bencotti": 67
    }
  },
  {
    "path": "src/main/java/seedu/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import com.google.gson.JsonParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.tasks.Class;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.tasks.TaskNonclass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static seedu.common.Constants.CLASS_CATEGORY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private static Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final String WORKING_DIRECTORY \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final java.nio.file.Path FOLDER_PATH \u003d java.nio.file.Paths.get(WORKING_DIRECTORY, \"Save\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final java.nio.file.Path FILE_PATH \u003d java.nio.file.Paths.get(WORKING_DIRECTORY, \"Save\", \"data.txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Locate folder location and check availability."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * If missing create folder."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static void checkFolderPath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        boolean directoryExists \u003d java.nio.file.Files.exists(FOLDER_PATH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (!directoryExists) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                Files.createDirectory(FOLDER_PATH);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                System.out.println(\"Error creating folder!\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Check whether data file has is present in directory."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return status of file availability"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static boolean checkFileExists() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        boolean fileExists \u003d java.nio.file.Files.exists(FILE_PATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return fileExists;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static String convertToGson(Task task) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return gson.toJson(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Over writes saved data file with latest task list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param taskList current task list for saving"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static void overwriteFile(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            File file \u003d new File(String.valueOf(FILE_PATH));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            FileWriter myWriter \u003d new FileWriter(file, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            for (Task task: taskList) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                String formattedTask \u003d convertToGson(task);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                myWriter.write(formattedTask);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                myWriter.write(System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            myWriter.close();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            System.out.println(\"[Error] File cannot be written!\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Reading in data file and storing into tasklist."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param taskList tasklist object created in main"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void loadFromFile(TaskList taskList) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        File file \u003d new File(String.valueOf(FILE_PATH));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            Scanner loader \u003d new Scanner(file);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            while (loader.hasNextLine()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                String gsonTask \u003d loader.nextLine();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                JsonElement jsonElement \u003d JsonParser.parseString(gsonTask);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                JsonObject obj \u003d jsonElement.getAsJsonObject();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                Task taskToAdd \u003d createClassFromJson(obj);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                taskList.addTask(taskToAdd);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            System.out.println(\"Error reading data file! \\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Creates a Task object from a given Json object."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * @param obj Json object containing the Task object."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * @return Task object based on task type."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private Task createClassFromJson(JsonObject obj) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String taskType \u003d obj.get(\"category\").toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        if (taskType.contains(CLASS_CATEGORY)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            return gson.fromJson(obj.toString(), Class.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            return gson.fromJson(obj.toString(), TaskNonclass.class);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 4,
      "rsanchez-macias": 58,
      "Bencotti": 67
    }
  },
  {
    "path": "src/main/java/seedu/tasklist/TaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import static seedu.common.Constants.CLASS_CATEGORY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    private static HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e categoryMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    //Accessors:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    // TODO Fix so that method returns a deep copy of the list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    //Mutator methods:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void changeDescription(int taskIndex, String newDescription) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        taskList.get(taskIndex).setDescription(newDescription);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void changeDate(int taskIndex, String newDate) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        taskList.get(taskIndex).setDate(newDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void changeTime(int taskIndex, String newTime) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        taskList.get(taskIndex).setTime(newTime);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void changeLocation(int taskIndex, String newLocation) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        taskList.get(taskIndex).setLocation(newLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void changeReminder(int taskIndex, String newReminder) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        taskList.get(taskIndex).setReminder(newReminder);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "  "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    //Other methods:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Checks if the given task contains the given pattern."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param task    task to inspect"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param pattern pattern to look for in task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return true if task contains pattern"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    private boolean hasPattern(Task task, String pattern) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        pattern \u003d pattern.toLowerCase();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Boolean hasKeywordInStringField \u003d task.getTitle().toLowerCase().contains(pattern)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                || task.getDescription().toLowerCase().contains(pattern);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        for (String location : task.getLocation()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            hasKeywordInStringField \u003d hasKeywordInStringField || location.toLowerCase().contains(pattern);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return hasKeywordInStringField;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Change category of a task and change the category mapping."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param taskIndex   Index of task that needs to be changed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param newCategory Newly category."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void changeCategory(int taskIndex, String newCategory) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String oldCategory \u003d taskList.get(taskIndex).getCategory();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.categoryMap.get(oldCategory).remove(Integer.valueOf(taskIndex));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (this.categoryMap.get(oldCategory).size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            this.categoryMap.remove(oldCategory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        taskList.get(taskIndex).setCategory(newCategory);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        updateCategoryMap(newCategory, taskIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Add new category mapping."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param category input category."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param index input task."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    private void updateCategoryMap(String category, Integer index) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (category.length() !\u003d 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            //add new category"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            if (!categoryMap.containsKey(category)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                this.categoryMap.put(category, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            this.categoryMap.get(category).add(index);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Add tasks and update the category mapping."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param task Task to add."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        updateCategoryMap(task.getCategory(), taskList.size() - 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Removes a task and return a reference to that object."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param index Index of the task to be deleted."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return The task that is deleted."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public Task deleteTask(int index) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String category \u003d taskList.get(index).getCategory();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        int j \u003d 0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        for (int i : categoryMap.get(category)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            if (i \u003d\u003d index) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                categoryMap.remove(j);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            j++;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (categoryMap.get(category).size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            categoryMap.remove(category);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Task toRemove \u003d taskList.get(index);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        taskList.remove(index);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return toRemove;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Finds the tasks that contain the given pattern in their"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * title, description or location."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param pattern pattern to look for in the tasks."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return tasks that match the pattern."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public ArrayList\u003cTask\u003e findTasks(String pattern) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            if (hasPattern(task, pattern)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                foundTasks.add(task);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return foundTasks;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public Boolean containsCategory(String category) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return this.categoryMap.containsKey(category);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public ArrayList\u003cInteger\u003e getCategoryTask(String category) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return this.categoryMap.get(category);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String[] getAllCategory() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return this.categoryMap.keySet().toArray(new String[this.categoryMap.size()]);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void resetCategoryMap() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        categoryMap.clear();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Checks list of tasks with supplied date to see how many tasks for that date."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param checkDate date used to check against list."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return number of tasks for that day."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static int categoryCounter(LocalDate checkDate) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        int totalTasksDay \u003d 0;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        // searching every task to see if date matches"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            int matchedTask;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            if (task.getCategory() \u003d\u003d CLASS_CATEGORY) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            ArrayList\u003cLocalDate\u003e taskDates \u003d task.getDate();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            for (LocalDate taskDate : taskDates) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                matchedTask \u003d checkDate.compareTo(taskDate);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                if (matchedTask \u003d\u003d 0) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                    totalTasksDay++;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return totalTasksDay;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 118,
      "rsanchez-macias": 51,
      "Bencotti": 24,
      "yuchenlichuck": 10
    }
  },
  {
    "path": "src/main/java/seedu/tasks/Class.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "package seedu.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "public class Class extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    /** Weekly task classification. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final char WEEK \u003d \u0027W\u0027;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Constructor method for initialising new class object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param title       title of class"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param description description of class"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param date        range of days the class will be on"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param time        range of time the class will be held"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param location    location of class"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param reminder    any additional reminder if any"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param category    categorise the class by grouping in needed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public Class(String title, String description, String date, String time, String location,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                 String reminder, String category) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        super(title, description, time, location, reminder, category);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (!date.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            setDate(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (!time.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            setTime(time);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void setDate(String dateInput) throws DateTimeParseException, NumberFormatException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.date.clear();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        isDateSetByUser \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String[] days \u003d dateInput.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        for (String day : days) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            // Get day of week"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            Integer dayOfWeekInt \u003d Integer.parseInt(day);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            if (dayOfWeekInt \u003e 7 | dayOfWeekInt \u003c 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                throw new NumberFormatException(Messages.MESSAGE_DAY_OR_WEEK);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            Integer inputDayOfWeek \u003d Integer.parseInt(day);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            //Transfer day of week to local date format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            LocalDate now \u003d LocalDate.now();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            Integer nowDayOfWeek \u003d now.getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            this.date.add(now.plusDays(inputDayOfWeek - nowDayOfWeek));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Return string of class in its specific format."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return string of class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String formattedTask \u003d super.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        for (int i \u003d 0; i \u003c date.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            if (time.size() !\u003d 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                formattedTask \u003d formattedTask + String.format(\" | %s : %s - %s\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                        date.get(i).getDayOfWeek().name(), time.get(i * 2), time.get(i * 2 + 1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                formattedTask \u003d formattedTask + String.format(\" | %s\", date.get(i).getDayOfWeek().name());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            if (location.size() \u003e i) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                formattedTask \u003d formattedTask + String.format(\" ( %s )\", location.get(i));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return formattedTask;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * Returns symbol for status of task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * @return tick for done, cross for not done"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public char getStatusIcon() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return WEEK;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 39,
      "rsanchez-macias": 4,
      "Bencotti": 32,
      "yuchenlichuck": 9
    }
  },
  {
    "path": "src/main/java/seedu/tasks/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "package seedu.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import static seedu.common.Constants.DEFAULT_CATEGORY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected String title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected String reminder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected String category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected ArrayList\u003cLocalDate\u003e date \u003d new ArrayList\u003cLocalDate\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected ArrayList\u003cLocalTime\u003e time \u003d new ArrayList\u003cLocalTime\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected ArrayList\u003cString\u003e location \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected boolean isDateSetByUser \u003d false;//check if need to automatically populate data"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    private static final DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Initialize task based on its category."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param title       title of class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param description description of class if any."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param reminder    reminder of class if any."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param category    category of class. Default is TODO."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public Task(String title, String description, String time, String location,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                String reminder, String category) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (!category.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            this.category \u003d category.trim().toUpperCase();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            this.category \u003d DEFAULT_CATEGORY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        // post condition check for existence of title"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assert (title.length() !\u003d 0) : title;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (!location.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            setLocation(location);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Check if a field is empty of not."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param input a field."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return true if it is not empty."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected Boolean hasInput(String input) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (input.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    //Mutator:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void setReminder(String reminder) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void setCategory(String category) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public abstract void setDate(String dateInput) throws DateTimeParseException, NumberFormatException;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * Set time to format: hh.mm aa"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param time input time with accepted format: hh:mm"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void setTime(String time) throws DateTimeParseException, NumberFormatException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.time.clear();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Boolean automaticAddDate \u003d !isDateSetByUser;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (automaticAddDate) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            this.date.clear();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        // Populate the date with current date if date is not inputted"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String[] timeInfo \u003d time.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        for (String atime : timeInfo) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            String[] timeRange \u003d atime.split(\"-\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            if (timeRange[1].equals(\"24:00\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                timeRange[1] \u003d \"23:59\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            LocalTime startTime \u003d LocalTime.parse(timeRange[0], timeFormatter);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            LocalTime endTime \u003d LocalTime.parse(timeRange[1], timeFormatter);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            if (startTime.isAfter(endTime)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                throw new NumberFormatException(TAB + Messages.MESSAGE_END_BEFORE_START_TIME);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            this.time.add(startTime);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            this.time.add(endTime);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            if (automaticAddDate) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                this.date.add(LocalDate.now());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public Boolean isDateSetByUser() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return this.isDateSetByUser;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Set the input location to right format."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * It there are multiple time slots, the location will be split to different part."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param location input location."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void setLocation(String location) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        //clear the previous stored locations"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.location.clear();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String[] locations \u003d location.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        for (String oneLocation : locations) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            this.location.add(oneLocation);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    //Accessors:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return this.category;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public ArrayList\u003cLocalDate\u003e getDate() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public ArrayList\u003cLocalTime\u003e getTime() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public ArrayList\u003cString\u003e getLocation() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return this.location;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String getReminder() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return this.reminder;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Output correct string format when listing tasks."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return correct format in string."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        // Post condition check that there should always be a category."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assert (category.length() !\u003d 0);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String formattedTask \u003d String.format(\"[%s] Title: %s\", category.toUpperCase().trim(), title.trim());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (hasInput(description)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            formattedTask \u003d formattedTask + String.format(\" | Description: %s\", description);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (hasInput(reminder)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            formattedTask \u003d formattedTask + String.format(\" | Reminder: %s\", reminder);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (this.date.size() \u003d\u003d 0 \u0026\u0026 this.time.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            if (this.location.size() !\u003d 0) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                formattedTask \u003d formattedTask + String.format(\" | Location: \");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                formattedTask +\u003d this.location.get(0);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return formattedTask;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 169,
      "rsanchez-macias": 6,
      "Bencotti": 10,
      "yuchenlichuck": 5
    }
  },
  {
    "path": "src/main/java/seedu/tasks/TaskNonclass.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "package seedu.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.calendar.CalendarParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "public class TaskNonclass extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    private static final DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final char TICK \u003d \u0027Y\u0027; //Yes"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final char CROSS \u003d \u0027N\u0027; //No"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private boolean isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Initializes Task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param title title of task if any."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param description description of task if any."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param date date in format:yyyy-mm-dd of task if any."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param time time in format: hh:mm of task if any."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param location location of task if any."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param reminder reminder of task if any."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param category category of task. If no input, default is TODO."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public TaskNonclass(String title, String description, String date, String time, String location,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                        String reminder, String category) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        super(title,description,time,location,reminder,category);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        //set default date to date inserted"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (!date.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            setDate(date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (!time.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            setTime(time);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void setDate(String dateInput) throws DateTimeParseException, NumberFormatException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.date.clear();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        isDateSetByUser \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (!dateInput.isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            String[] dates \u003d dateInput.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            for (String date : dates) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                LocalDate addedDate \u003d CalendarParser.convertToDate(date);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                if (addedDate.compareTo(LocalDate.now()) \u003c 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                    throw new NumberFormatException(Messages.MESSAGE_PAST_DATE_Error);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                this.date.add(addedDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                isDateSetByUser \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Format the string to be correct output form."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return a string."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String formattedTask \u003d super.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        for (int i \u003d 0; i \u003c date.size(); i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            if (time.size() !\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                formattedTask \u003d formattedTask + String.format(\" | %s : %s - %s\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                        date.get(i), time.get(i * 2), time.get(i * 2 + 1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                formattedTask \u003d formattedTask + String.format(\" | %s\", date.get(i));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            if (location.size() \u003e i) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                formattedTask \u003d formattedTask + String.format(\" ( %s )\",location.get(i));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return formattedTask;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Returns symbol for status of task."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return tick for done, cross for not done"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public char getStatusIcon() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return (isDone ? TICK : CROSS); //return tick or X symbols"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Returns done status of task."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return true or false whether completed"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public boolean getDoneStatus() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 53,
      "rsanchez-macias": 7,
      "Bencotti": 41
    }
  },
  {
    "path": "src/main/java/seedu/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /** A platform independent line separator. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final String NEW_LINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String DIVIDER \u003d \"__________________________________________________________________________\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private static final String PROMPT \u003d \"What is your command?\" + NEW_LINE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private  static final  String LOGO \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                TAB + \" ______     ______     ______   ______\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                + TAB + \"/\\\\  ___\\\\   /\\\\  __ \\\\   /\\\\  ___\\\\ /\\\\  ___\\\\\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                + TAB + \"\\\\ \\\\ \\\\____  \\\\ \\\\  __ \\\\  \\\\ \\\\  __\\\\ \\\\ \\\\___  \\\\\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                + TAB + \" \\\\ \\\\_____\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\    \\\\/\\\\_____\\\\\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                + TAB + \"  \\\\/_____/   \\\\/_/\\\\/_/   \\\\/_/     \\\\/_____/\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private static final String MESSAGE_INTRO \u003d NEW_LINE + TAB + \"Welcome to CAFS! Type \\\"help\\\" at any time if \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            + \"you are lost\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private Scanner input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Method used to print all messages back to user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Meant to improve performance by reducing number of system calls used."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param messages  Variable length argument to display to users"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void showUserMessage(String... messages) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        for (String message : messages) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            System.out.print(message);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        System.out.println(NEW_LINE + DIVIDER + NEW_LINE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        showUserMessage(LOGO + MESSAGE_INTRO);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Prompts user for input."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return String containing user command for parsing"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        System.out.print(PROMPT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String userCommand \u003d input.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        assert userCommand.length() \u003e 0 : \"Command input should contain at least one word\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return userCommand.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Displays all category."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param categories array of categories."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void showAllCategory(String[] categories) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        System.out.println(NEW_LINE + TAB + \"Current categories: \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        for (String category : categories) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            System.out.println(TAB + TAB + \" \u003e\u003e\u003e\" + category);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void showResultToUser(CommandResult result) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        showUserMessage(result.getFeedback());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /** Displays the error message to user."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param error the error message."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void showError(String error) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        showUserMessage(error);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 18,
      "rsanchez-macias": 32,
      "Bencotti": 32
    }
  },
  {
    "path": "src/test/java/seedu/cafs/MainTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "package seedu.cafs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.tasklist.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "class MainTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String input \u003d \"add n/research paper d/2020-06-06 i/essay for writing 101\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String expected \u003d \"[TODO] Title: research paper | \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                + \"Description: essay for writing 101 | 2020-06-06\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        AddCommand command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String output \u003d tasks.getTask(0).toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void emptyCommandTest() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String testInput \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        Command command \u003d new Parser().parseCommand(testInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        boolean checkIfHelpCommand \u003d command instanceof HelpCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        assertTrue(checkIfHelpCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 2,
      "rsanchez-macias": 3,
      "Bencotti": 42,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/command/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public void testAddDeadlineYeapYear() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input \u003d \"add n/task t/11:15-13:15 d/2024-02-29\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String expected \u003d \"[TODO] Title: task | 2024-02-29 : 11:15 - 13:15\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        AddCommand command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String output \u003d tasks.getTask(0).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        boolean isEqual \u003d output.equals(expected);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        assertTrue(isEqual);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public void testAddDeadline() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        input \u003d \"add n/homework i/cs2113_home_work \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"t/00:20-23:00 d/2021-12-31 l/com2 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"r/reminder\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String expected;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        expected \u003d \"[TODO] Title: homework \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"| Description: cs2113_home_work  | \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"Reminder: reminder | 2021-12-31 : \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"00:20 - 23:00 ( com2 )\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        AddCommand command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String output \u003d tasks.getTask(0).toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void addCommand_noTitle_exceptionThrown() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            String firstInput \u003d \"add\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            AddCommand firstCommand \u003d new AddCommand(firstInput);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            firstCommand.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            firstCommand.execute();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            String expected \u003d TAB + \"[Error][Add] Please input a title for the task.\\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            assertEquals(expected, e.getMessage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 28,
      "rsanchez-macias": 3,
      "Bencotti": 1,
      "yuchenlichuck": 53
    }
  },
  {
    "path": "src/test/java/seedu/command/CalendarCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class CalendarCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    void checkNoInput() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String input \u003d \"add n/i i/n d/2020-05-30\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            command.execute().getFeedback();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command \u003d new CalendarCommand(null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            command.execute().getFeedback();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    void checkValidInput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String input \u003d \"add n/i i/n d/2020-05-01\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            command.execute().getFeedback();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command \u003d new CalendarCommand(\"5\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            String output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertNotNull(output);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    void checkExceededMonthInput() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        Command command \u003d new CalendarCommand(\"13\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            String output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertNotNull(output);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bencotti": 72
    }
  },
  {
    "path": "src/test/java/seedu/command/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void checkClearCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Command command \u003d new ClearCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            command.execute().getFeedback();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 31
    }
  },
  {
    "path": "src/test/java/seedu/command/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.tasklist.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public void testDeleteDeadLine() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input \u003d \"add n/task t/11:15-13:15 d/2021-12-31\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input1 \u003d \"add n/homework i/cs2113_homework_team_project \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"t/00:20-23:00 d/2021-12-30 l/com2 r/reminder\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new AddCommand(input1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String deleteInput \u003d \"delete 2\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new DeleteCommand(deleteInput);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String expected \u003d \"[TODO] Title: task | 2021-12-31 : 11:15 - 13:15\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String output \u003d tasks.getTask(0).toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        boolean isEqual \u003d output.equals(expected);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        assertTrue(isEqual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public void testDeleteByCategory() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input \u003d \"add n/task t/11:15-13:15 d/2021-12-31\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input1 \u003d \"add n/homework i/cs2113_homework_team_project \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"t/00:20-23:00 d/2021-12-30 c/deadline l/com2 r/reminder\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new AddCommand(input1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input2 \u003d \"add n/team_work i/CS2106 \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"t/00:20-12:00 d/2042-02-10 l/com2 r/reminder\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new AddCommand(input2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String deleteInput \u003d \"delete c/deadline\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new DeleteCommand(deleteInput);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String expected \u003d \"[TODO] Title: task | 2021-12-31 : 11:15 - 13:15\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String output \u003d tasks.getTask(0).toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String expected1 \u003d \"[TODO] Title: team_work | Description: CS2106  \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"| Reminder: reminder | 2042-02-10 : 00:20 - 12:00 ( com2 )\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String output1 \u003d tasks.getTask(5).toString();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        assertEquals(expected1, output1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public void testDeleteByDate() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input \u003d \"add n/task t/11:15-13:15 d/2021-12-31\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input1 \u003d \"add n/homework i/cs2113_homework_team_project \""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"t/00:20-23:00 d/2021-12-30 l/com2 r/reminder\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new AddCommand(input1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input2 \u003d \"add n/homework i/cs2113_homework_team_project \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"t/00:20-23:00 d/2021-12-31 l/com2 r/reminder\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new AddCommand(input2);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String deleteInput \u003d \"delete d/2021-12-31\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new DeleteCommand(deleteInput);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String expected \u003d \"[TODO] Title: homework | Description:\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \" cs2113_homework_team_project  | Reminder: reminder\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \" | 2021-12-30 : 00:20 - 23:00 ( com2 )\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        for (Task task : tasks.getList()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertEquals(expected, task.toString());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public void testDeleteByDateTime() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input \u003d \"add n/task t/11:15-13:15 d/2021-12-31\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input1 \u003d \"add n/homework i/cs2113_homework_team_project \""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"t/00:20-23:00 d/2021-12-30 l/com2 r/reminder\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new AddCommand(input1);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input2 \u003d \"add n/homework i/cs2113_homework_team_project \""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"t/00:20-23:00 d/2021-12-31 l/com2 r/reminder\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new AddCommand(input2);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String deleteInput \u003d \"delete t/00:20-23:00\";"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new DeleteCommand(deleteInput);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String expected \u003d \"[TODO] Title: task | 2021-12-31 : 11:15 - 13:15\";"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        for (Task task : tasks.getList()) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertEquals(expected, task.toString());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public void testDeleteByCategoryDateTime() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input1 \u003d \"add n/homework i/cs2106_project \""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"t/00:20-23:00 d/2021-12-31 l/com2 r/reminder c/deadline\";"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Command command \u003d new AddCommand(input1);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input2 \u003d \"add n/homework i/cs2113_homework_team_project \""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"t/00:20-23:00 d/2021-12-31 l/com2 r/reminder\";"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new AddCommand(input2);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String deleteInput \u003d \"delete c/deadline t/00:20-23:00 d/2021-12-31\";"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new DeleteCommand(deleteInput);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String expected \u003d \"[TODO] Title: homework | Description:\""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \" cs2113_homework_team_project  | Reminder: reminder\""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \" | 2021-12-31 : 00:20 - 23:00 ( com2 )\";"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        for (Task task : tasks.getList()) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertEquals(expected, task.toString());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public void testDeleteZeroTask() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String deleteInput \u003d \"delete 2\";"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Command command \u003d new DeleteCommand(deleteInput);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String expected \u003d \"  [Alert][delete] There is nothing to delete, the list is empty\\n\";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rsanchez-macias": 1,
      "yuchenlichuck": 308
    }
  },
  {
    "path": "src/test/java/seedu/command/DoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import static seedu.common.Constants.NEW_LINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.tasklist.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "class DoneCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    void checkNegativeNumberInput() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        Command command \u003d new DoneCommand(\"-1\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String expected \u003d TAB + \"[Error][Done] Please insert a valid positive number\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    void checkValidInput() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String input \u003d \"add n/task t/11:15-13:15 d/2024-02-29\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            command.execute().getFeedback();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command \u003d new DoneCommand(\"0\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String expected \u003d TAB + \"[Error][Done] List numbering starts from 1\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    void checkEmptyList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        Command command \u003d new DoneCommand(\"1\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String expected \u003d TAB + \"[Alert][Done]: There are no tasks to mark completed!\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    void checkFilledList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String input \u003d \"add n/task1 i/desc1\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            command.execute().getFeedback();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command \u003d new DoneCommand(\"1\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String expected \u003d TAB + \"Task marked as done: \" + NEW_LINE + TAB + TAB"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                + \"[Y] [TODO] Title: task1 | Description: desc1\\n\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    void checkInvalidIndexFilledList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String input \u003d \"add n/task2 i/desc2\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            command.execute().getFeedback();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command \u003d new DoneCommand(\"2\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            command.execute().getFeedback();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    void checkSpellIndexFilledList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String input \u003d \"add n/task2 i/desc2\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            command.execute().getFeedback();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command \u003d new DoneCommand(\"one\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            command.execute().getFeedback();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    void checkAlreadyDoneList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String input \u003d \"add n/task2 i/desc2\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            command.execute().getFeedback();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command \u003d new DoneCommand(\"1\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            command.execute().getFeedback();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command \u003d new DoneCommand(\"1\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String expected \u003d TAB + \"[Alert][Done]: Task is already done\\n\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bencotti": 170
    }
  },
  {
    "path": "src/test/java/seedu/command/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void testCorrectOutput() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String firstInput \u003d \"add n/Sleep early\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String firstExpected \u003d \"[TODO] Title: Sleep early\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        AddCommand firstCommand \u003d new AddCommand(firstInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        firstCommand.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            firstCommand.execute();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String firstOutput \u003d tasks.getTask(0).toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assertTrue(firstOutput.equals(firstExpected));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String secondInput \u003d \"edit 1 i/for your health\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String secondExpected \u003d \"[TODO] Title: Sleep early | Description: for your health\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        EditCommand secondCommand \u003d new EditCommand(secondInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        secondCommand.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            secondCommand.execute();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String secondOutput \u003d tasks.getTask(0).toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        assertEquals(secondExpected,secondOutput);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void editCommand_editTitle_exceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            String firstInput \u003d \"add n/Sleep early\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            AddCommand firstCommand \u003d new AddCommand(firstInput);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            firstCommand.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            firstCommand.execute();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            String secondInput \u003d \"edit 1 n/Sleep now\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            EditCommand secondCommand \u003d new EditCommand(secondInput);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            secondCommand.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            secondCommand.execute();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            String expected \u003d \"  [Alert][edit] Not allowed to change title\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            assertEquals(expected, e.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void editCommand_IndexOutOfBounds_exceptionThrown() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            String firstInput \u003d \"add n/Sleep early\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            AddCommand firstCommand \u003d new AddCommand(firstInput);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            firstCommand.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            firstCommand.execute();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            String secondInput \u003d \"edit 4 n/Sleep now\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            EditCommand secondCommand \u003d new EditCommand(secondInput);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            secondCommand.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            secondCommand.execute();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            String expected \u003d \"  [Error][edit] Task number \\\"4\\\" doesn\u0027t exit\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            assertEquals(expected, e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 62,
      "rsanchez-macias": 33,
      "Bencotti": 1,
      "yuchenlichuck": 15
    }
  },
  {
    "path": "src/test/java/seedu/command/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    void checkValidCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String input \u003d \"add n/i i/n d/2020-05-10\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            command.execute().getFeedback();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            command.execute().getFeedback();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bencotti": 37
    }
  },
  {
    "path": "src/test/java/seedu/command/FailedCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.common.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import static seedu.command.ExitCommand.ERROR_FEEDBACK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import static seedu.parser.Parser.COMMAND_LENGTH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "public class FailedCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void checkFailedCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String userCommand \u003d \"done \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String[] commandSections \u003d userCommand.split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Command command \u003d new FailedCommand(DoneCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                commandSections.length - COMMAND_LENGTH, DoneCommand.ARGUMENT_COUNT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String expectedOutput \u003d \"  [Error][done]: Wrong number of arguments,\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                + \"  Received: 0 Expected: 1\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assertEquals(output,expectedOutput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void checkAnotherFailedCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String userCommand \u003d \"bye 1 \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String[] commandSections \u003d userCommand.split(\" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Command command \u003d new FailedCommand(ExitCommand.COMMAND_WORD, ExitCommand.ERROR_FEEDBACK);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String expectedOutput \u003d \"  [Error][bye]: No arguments required\" + Constants.NEW_LINE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assertEquals(output,expectedOutput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 57,
      "rsanchez-macias": 2
    }
  },
  {
    "path": "src/test/java/seedu/command/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void testFindTaskInTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String input \u003d \"add n/testForfInd t/11:15-13:15 d/2024-02-29\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command \u003d new FindCommand(\"find find\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String expectedOutput \u003d TAB + \"Found the followings tasks:\\n\" + TAB + TAB"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                + \"1. [TODO] Title: testForfInd | 2024-02-29 : 11:15 - 13:15\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        assertEquals(expectedOutput,output);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void testFindTaskInDescription() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String input \u003d \"add n/test i/FinDDes t/11:15-13:15 d/2024-02-29\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command \u003d new FindCommand(\"find dEs\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String expectedOutput \u003d TAB + \"Found the followings tasks:\\n\" + TAB + TAB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                + \"1. [TODO] Title: test | Description: FinDDes  | 2024-02-29 : 11:15 - 13:15\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        assertEquals(expectedOutput,output);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void testFindTaskInLocation() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String input \u003d \"add n/test l/NUScom2\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command \u003d new FindCommand(\"find COM\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String expectedOutput \u003d TAB + \"Found the followings tasks:\\n\" + TAB + TAB"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                + \"1. [TODO] Title: test | Location: NUScom2\\n\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        assertEquals(expectedOutput,output);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void findTask_noPatternInput_outputError() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String input \u003d \"add n/testForfInd\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command \u003d new FindCommand(\"find\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String expectedOutput \u003d TAB + \"[Error][find] Please enter a pattern to look for \\n\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        assertEquals(output,expectedOutput);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void findTask_noFindTask_outputPromptMessage() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String input \u003d \"add n/testForfInd\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command \u003d new FindCommand(\"find nothing\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String expectedOutput \u003d TAB + \"[Alert][find] No tasks found with \\\"nothing\\\" in \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                + \"their title, description, or location\\n\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        assertEquals(output,expectedOutput);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bencotti": 150
    }
  },
  {
    "path": "src/test/java/seedu/command/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import static seedu.command.HelpCommand.HELP_LEGEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    void execute_HelpCommand_returnFeedback() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Command command \u003d new HelpCommand();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String output \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String expected \u003d HELP_LEGEND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        expected +\u003d TAB + \"Command List:\\n\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        expected +\u003d TAB + TAB + AddCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        expected +\u003d TAB + TAB + \"Usage: \" + AddCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        expected +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        expected +\u003d TAB + TAB + EditCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        expected +\u003d TAB + TAB + \"Usage: \" + EditCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        expected +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        expected +\u003d TAB + TAB + ListCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        expected +\u003d TAB + TAB + \"Usage: \" + System.lineSeparator() + TAB + TAB + TAB"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                + ListCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        expected +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        expected +\u003d TAB + TAB + DeleteCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        expected +\u003d TAB + TAB + \"Usage: \"  + System.lineSeparator() + TAB + TAB + TAB"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                + DeleteCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        expected +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        expected +\u003d TAB + TAB + DoneCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        expected +\u003d TAB + TAB + \"Usage: \" + DoneCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        expected +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        expected +\u003d TAB + TAB + FindCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        expected +\u003d TAB + TAB + \"Usage: \" + FindCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        expected +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        expected +\u003d TAB + TAB + CalendarCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        expected +\u003d TAB + TAB + \"Usage: \" + CalendarCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        expected +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d TAB + TAB + ClearCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d TAB + TAB + \"Usage: \" + ClearCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        expected +\u003d TAB + TAB + ExitCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        expected +\u003d TAB + TAB + \"Usage: \" + ExitCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        expected +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        for (int i \u003d 0; i \u003c output.length(); i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            if (expected.charAt(i) !\u003d output.charAt(i)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                assertEquals(expected.charAt(i), output.charAt(i));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        boolean isEqual \u003d output.equals(expected);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        assertTrue(isEqual);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rsanchez-macias": 6,
      "Bencotti": 41,
      "yuchenlichuck": 30
    }
  },
  {
    "path": "src/test/java/seedu/command/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.tasklist.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    void checkListZeroException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Command command \u003d new ListCommand(\"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String expected \u003d \"  [Alert][list] List is empty\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    void checkListOne() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input \u003d \"add n/task t/11:15-13:15 d/2024-02-29\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new ListCommand(\"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String expected \u003d TAB + \"There are 1 task.\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"    1. [N] [TODO] Title: task | 2024-02-29 : 11:15 - 13:15\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    void checkListMul() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input \u003d \"add n/task t/11:15-13:15 d/2024-02-29\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new ListCommand(\"\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String expected \u003d TAB + \"There are 6 tasks.\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"    1. [N] [TODO] Title: task | 2024-02-29 : 11:15 - 13:15\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"    2. [N] [TODO] Title: task | 2024-02-29 : 11:15 - 13:15\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"    3. [N] [TODO] Title: task | 2024-02-29 : 11:15 - 13:15\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"    4. [N] [TODO] Title: task | 2024-02-29 : 11:15 - 13:15\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"    5. [N] [TODO] Title: task | 2024-02-29 : 11:15 - 13:15\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"    6. [N] [TODO] Title: task | 2024-02-29 : 11:15 - 13:15\\n\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    void testListByTime() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input \u003d \"add n/task t/11:15-13:15 d/2024-02-29\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        input \u003d \"add n/task t/13:00-15:00 d/2028-02-19\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new ListCommand(\"list t/11:15-13:00\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String expected \u003d TAB + \"There are 2 tasks.\\n\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"    1. [N] [TODO] Title: task | 2024-02-29 : 11:15 - 13:15\\n\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"    2. [N] [TODO] Title: task | 2024-02-29 : 11:15 - 13:15\\n\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    void testListByDate() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input \u003d \"add n/task  t/11:15-13:15 d/2024-02-29\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        //first input"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        input \u003d \"add n/task2 t/13:00-15:00 d/2028-02-15\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        //second input"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        input \u003d \"add n/task1 t/11:15-13:15 d/2024-02-27 c/deadline\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        //third input"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        input \u003d \"add n/task t/13:00-15:00 d/2028-02-19\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new ListCommand(\"list d/2028-02-19 2024-02-29\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String expected \u003d TAB + \"There are 2 tasks.\\n\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"    1. [N] [TODO] Title: task | 2024-02-29 : 11:15 - 13:15\\n\""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"    2. [N] [TODO] Title: task | 2028-02-19 : 13:00 - 15:00\\n\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    void testListByDateTime() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input \u003d \"add n/task t/11:15-13:15 d/2024-02-29\";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        input \u003d \"add n/task t/13:00-15:00 d/2024-02-29\";"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        input \u003d \"add n/task t/11:15-13:15 d/2024-02-28\";"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new ListCommand(\"list t/12:15-12:30 d/2024-02-29\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String expected \u003d TAB + \"There are 3 tasks.\\n\""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"    1. [N] [TODO] Title: task | 2024-02-29 : 11:15 - 13:15\\n\""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"    2. [N] [TODO] Title: task | 2024-02-29 : 11:15 - 13:15\\n\""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"    3. [N] [TODO] Title: task | 2024-02-29 : 11:15 - 13:15\\n\";"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    void testListByCategoryDateTime() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input \u003d \"add n/task t/11:15-13:15 d/2024-02-29\";"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        input \u003d \"add n/task i/cs2112 t/13:00-15:00 d/2024-02-29\";"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        input \u003d \"add n/task t/11:15-13:15 d/2024-02-29 c/deadline\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        input \u003d \"add n/task t/11:15-13:15 d/2024-02-28\";"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new ListCommand(\"list t/12:15-12:30 d/2024-02-29 c/deadline\");"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String expected \u003d TAB + \"There are 3 tasks.\\n\""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"    1. [N] [DEADLINE] Title: task | 2024-02-29 : 11:15 - 13:15\\n\""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"    2. [N] [DEADLINE] Title: task | 2024-02-29 : 11:15 - 13:15\\n\""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"    3. [N] [DEADLINE] Title: task | 2024-02-29 : 11:15 - 13:15\\n\";"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    void testListByCategoryTime() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input \u003d \"add n/task t/11:15-13:15 d/2024-02-29\";"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        input \u003d \"add n/task t/13:00-15:00 d/2028-02-19\";"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new ListCommand(\"list t/11:15-12:30 c/todo\");"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String expected \u003d TAB + \"There are 2 tasks.\\n\""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"    1. [N] [TODO] Title: task | 2024-02-29 : 11:15 - 13:15\\n\""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"    2. [N] [TODO] Title: task | 2024-02-29 : 11:15 - 13:15\\n\";"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    void testListByCategoryTime2400() {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        //task the time 2400"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input \u003d \"add n/task t/21:15-23:15 d/2024-02-29\";"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        input \u003d \"add n/task t/13:00-15:00 d/2028-02-19\";"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new ListCommand(\"list t/23:00-24:00 c/todo\");"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String expected \u003d TAB + \"There are 1 task.\\n\""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"    1. [N] [TODO] Title: task | 2024-02-29 : 21:15 - 23:15\\n\";"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    void testListByCategoryDate() {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input \u003d \"add n/task  t/11:15-13:15 d/2024-02-29\";"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        input \u003d \"add n/task t/13:00-15:00 d/2028-02-19\";"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        input \u003d \"add n/task t/11:15-13:15 d/2024-02-29 c/deadline\";"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        input \u003d \"add n/task t/13:00-15:00 d/2028-02-19\";"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new ListCommand(\"list d/2028-02-19 2024-02-29 c/deadline\");"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String expected \u003d TAB + \"There are 1 task.\\n\""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"    1. [N] [DEADLINE] Title: task | 2024-02-29 : 11:15 - 13:15\\n\";"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    void testListByCategory() {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input \u003d \"add n/task t/11:15-13:15 d/2024-02-29\";"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Command command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        input \u003d \"add n/2113 v2.1 t/23:00-24:00 d/2020-05-16 c/deadline\";"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        input \u003d \"add t/11:00-12:00 01:00-03:00 n/2113 d/3 4 c/CLASS l/COM2 COM1\";"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command \u003d new ListCommand(\"list c/todo\");"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String expected \u003d TAB + \"There are 3 tasks.\\n\""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"    1. [N] [TODO] Title: task | 2024-02-29 : 11:15 - 13:15\\n\""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"    2. [N] [TODO] Title: task | 2024-02-29 : 11:15 - 13:15\\n\""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"    3. [N] [TODO] Title: task | 2024-02-29 : 11:15 - 13:15\\n\";"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bencotti": 11,
      "yuchenlichuck": 590
    }
  },
  {
    "path": "src/test/java/seedu/command/MainTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.tasklist.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "class MainTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input \u003d \"add n/research paper d/2020-06-06 i/essay for writing 101\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String expected \u003d \"[TODO] Title: research paper | \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                + \"Description: essay for writing 101 | 2020-06-06\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        AddCommand command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String output \u003d tasks.getTask(0).toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public void emptyCommandTest() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String testInput \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Command command \u003d new Parser().parseCommand(testInput);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        boolean checkIfHelpCommand \u003d command instanceof HelpCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        assertTrue(checkIfHelpCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuchenlichuck": 50
    }
  },
  {
    "path": "src/test/java/seedu/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.command.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.command.CalendarCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.command.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.command.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.command.DoneCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.command.EditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.command.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.command.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.command.FailedCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.command.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.command.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.common.Constants;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.common.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static seedu.command.HelpCommand.HELP_LEGEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void isInteger_invalidInteger_returnFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String invalidNumber \u003d \"1568..122\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        boolean isInvalidInt \u003d Parser.isInteger(invalidNumber);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertFalse(isInvalidInt);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        invalidNumber \u003d \"abcde\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        isInvalidInt \u003d Parser.isInteger(invalidNumber);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertFalse(isInvalidInt);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        invalidNumber \u003d \"1234.12\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        isInvalidInt \u003d Parser.isInteger(invalidNumber);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertFalse(isInvalidInt);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        invalidNumber \u003d \"12.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        isInvalidInt \u003d Parser.isInteger(invalidNumber);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertFalse(isInvalidInt);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        invalidNumber \u003d \"0x123\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        isInvalidInt \u003d Parser.isInteger(invalidNumber);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertFalse(isInvalidInt);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void parseCommand_ListCommand_createCommand() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String input \u003d \"list\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        boolean isListCommand \u003d command instanceof ListCommand;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertTrue(isListCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        input \u003d \"LiST t/12:00-13:00\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        isListCommand \u003d command instanceof ListCommand;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertTrue(isListCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        input \u003d \"LIST c/Category\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        isListCommand \u003d command instanceof ListCommand;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertTrue(isListCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void parseCommand_DeleteCommand_createCommand() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String input \u003d \"delete\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        boolean isAddCommand \u003d command instanceof DeleteCommand;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertTrue(isAddCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        input \u003d \"DElEte 2\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        isAddCommand \u003d command instanceof DeleteCommand;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertTrue(isAddCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void parseCommand_HelpCommand_createCommand() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String input \u003d \"help\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        boolean isHelpCommand \u003d command instanceof HelpCommand;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertTrue(isHelpCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        input \u003d \"HeLP\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        isHelpCommand \u003d command instanceof HelpCommand;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertTrue(isHelpCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void parseCommand_AddCommand_createCommand() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String input \u003d \"ADD n/meeting i/project 3\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        boolean isAddCommand \u003d command instanceof AddCommand;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertTrue(isAddCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        input \u003d \"add\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        isAddCommand \u003d command instanceof AddCommand;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertTrue(isAddCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void parseCommand_FindCommand_createCommand() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String input \u003d \"fINd hello\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        boolean isFindCommand \u003d command instanceof FindCommand;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertTrue(isFindCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        input \u003d \"FIND meeting\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        isFindCommand \u003d command instanceof FindCommand;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertTrue(isFindCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        input \u003d \"FINDmeeting\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        isFindCommand \u003d command instanceof FindCommand;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertFalse(isFindCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void parseCommand_EditCommand_createCommand() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String input \u003d \"EDit 8 n/meeting i/project 3\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        boolean isEditCommand \u003d command instanceof EditCommand;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertTrue(isEditCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        input \u003d \"ediT\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        isEditCommand \u003d command instanceof EditCommand;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertTrue(isEditCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void parseCommand_ClearCommand_createCommand() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String input \u003d \"ClC\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        boolean isClearCommand \u003d command instanceof ClearCommand;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertTrue(isClearCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        input \u003d \"clear\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        isClearCommand \u003d command instanceof ClearCommand;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertFalse(isClearCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void parseCommand_DoneCommand_createCommand() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String input \u003d \"DoNe 1\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        boolean isDoneCommand \u003d command instanceof DoneCommand;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertTrue(isDoneCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        input \u003d \"donE 3\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        isDoneCommand \u003d command instanceof DoneCommand;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertTrue(isDoneCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void parserCommand_InvalidDoneCommand_returnFailedCommand() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String input \u003d \"DoNe\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        boolean isFailedCommand \u003d command instanceof FailedCommand;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertTrue(isFailedCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        input \u003d \"DoNe 3 2 3\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        isFailedCommand \u003d command instanceof FailedCommand;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertTrue(isFailedCommand);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void parseCommand_ExitCommand_createCommand() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String input \u003d \"BYE\";"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        boolean isExitCommand \u003d command instanceof ExitCommand;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertTrue(isExitCommand);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        input \u003d \"byE\";"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        isExitCommand \u003d command instanceof ExitCommand;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertTrue(isExitCommand);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void parseCommand_ExitCommandWithParameter_exceptionThrown() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String input \u003d \"bye 3\";"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String expected \u003d \"  [Error][bye]: No arguments required\" + Constants.NEW_LINE;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertEquals(output,expected);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void parseCommand_CalendarCommand_createCommand() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String input \u003d \"calenDAr\";"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        boolean isCalendarCommand \u003d command instanceof CalendarCommand;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertTrue(isCalendarCommand);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        input \u003d \"CALENDAR 14\";"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        isCalendarCommand \u003d command instanceof CalendarCommand;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertTrue(isCalendarCommand);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void parseCommand_InvalidCalendarCommand_returnFailedCommand() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String input \u003d \"calenDAr 1 2 3 4 5\";"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        boolean isFailedCommand \u003d command instanceof FailedCommand;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertTrue(isFailedCommand);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void parseCommand_InvalidCommand_errorMessage() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String input \u003d \"exit\";"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            output \u003d command.execute().getFeedback();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String expected \u003d TAB + String.format(Messages.MESSAGE_INVALID_COMMAND, input) + Constants.NEW_LINE;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d HELP_LEGEND;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d TAB + \"Command List:\\n\\n\";"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d TAB + TAB + AddCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d TAB + TAB + \"Usage: \" + AddCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d TAB + TAB + EditCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d TAB + TAB + \"Usage: \" + EditCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d TAB + TAB + ListCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d TAB + TAB + \"Usage: \" + System.lineSeparator() + TAB + TAB + TAB"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                + ListCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d TAB + TAB + DeleteCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d TAB + TAB + \"Usage: \"  + System.lineSeparator() + TAB + TAB + TAB"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                + DeleteCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d TAB + TAB + DoneCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d TAB + TAB + \"Usage: \" + DoneCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d TAB + TAB + FindCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d TAB + TAB + \"Usage: \" + FindCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d TAB + TAB + CalendarCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d TAB + TAB + \"Usage: \" + CalendarCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d TAB + TAB + ClearCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d TAB + TAB + \"Usage: \" + ClearCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d TAB + TAB + ExitCommand.COMMAND_INFO + System.lineSeparator();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d TAB + TAB + \"Usage: \" + ExitCommand.COMMAND_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rsanchez-macias": 345,
      "Bencotti": 11
    }
  },
  {
    "path": "src/test/java/seedu/storage/StorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "package seedu.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.command.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.command.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.command.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.tasklist.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private String addCommandNonClass \u003d \"add n/name %c c/deadline\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private String addCommandClass \u003d \"add n/name %c c/class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private String deleteCommand \u003d \"delete 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private String listCommand \u003d \"list\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private void initCommand(Command command) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        command.setCommandVariables(taskList, storage, ui);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private void addOneNonClass() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String currInput \u003d String.format(addCommandNonClass, (\u0027A\u0027 + taskList.getListSize()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        AddCommand command \u003d new AddCommand(currInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        initCommand(command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private void addOneClass() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String input \u003d String.format(addCommandClass, (\u0027A\u0027 + taskList.getListSize()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        AddCommand command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        initCommand(command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private void removeOneTask() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String input \u003d deleteCommand;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        DeleteCommand command \u003d new DeleteCommand(input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        initCommand(command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private CommandResult getList(TaskList taskList) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        ListCommand command \u003d new ListCommand(listCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        initCommand(command);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            return command.execute();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void loadFromFile_nonClassTask_loaded() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        addOneNonClass();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        addOneNonClass();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        addOneNonClass();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        addOneNonClass();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        storage.loadFromFile(testTaskList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        CommandResult testResult \u003d getList(testTaskList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        CommandResult expectedResult \u003d getList(taskList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String output \u003d testResult.getFeedback();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String expected \u003d expectedResult.getFeedback();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void loadFromFile_classTask_loaded() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        addOneClass();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        addOneClass();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        addOneClass();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        storage.loadFromFile(testTaskList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        CommandResult testResult \u003d getList(testTaskList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        CommandResult expectedResult \u003d getList(taskList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String output \u003d testResult.getFeedback();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String expected \u003d expectedResult.getFeedback();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void overWriteFile_addAndDeleteTasks_updatedFile() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        addOneClass();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        addOneNonClass();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        addOneClass();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        storage.loadFromFile(testTaskList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        CommandResult testResult \u003d getList(testTaskList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        CommandResult expectedResult \u003d getList(taskList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String output \u003d testResult.getFeedback();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String expected \u003d expectedResult.getFeedback();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        removeOneTask();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        removeOneTask();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        addOneNonClass();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        addOneClass();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        removeOneTask();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        testResult \u003d getList(testTaskList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expectedResult \u003d getList(taskList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        output \u003d testResult.getFeedback();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        expected \u003d expectedResult.getFeedback();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertEquals(expected, output);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rsanchez-macias": 157,
      "yuchenlichuck": 4
    }
  },
  {
    "path": "src/test/java/seedu/tasklist/TaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "package seedu.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.tasks.Class;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.tasks.TaskNonclass;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    private void addTestTask(TaskList tasks) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        tasks.addTask(new TaskNonclass(\"testTitle\", \"\", \"2020-06-10\", \"\", \"NUS\", \"\", \"Test\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        tasks.addTask(new Class(\"testClass\", \"\", \"1 3\", \"\", \"NTU NUS\", \"\", \"CLASS\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void addAndDeleteTask() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        addTestTask(tasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String expectedTask \u003d \"[TEST] Title: testTitle | 2020-06-10 ( NUS )\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String expectedClass \u003d \"[CLASS] Title: testClass | MONDAY ( NTU ) | WEDNESDAY ( NUS )\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assertEquals(expectedTask,tasks.getTask(0).toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assertEquals(expectedClass,tasks.getTask(1).toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Integer output \u003d tasks.getListSize();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Integer expected \u003d 2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assertEquals(output,expected);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        tasks.deleteTask(1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Integer outputAfterDelete \u003d tasks.getListSize();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Integer expectedAfterDelete \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assertEquals(outputAfterDelete,expectedAfterDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void changeTask() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        tasks.resetCategoryMap();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        addTestTask(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String expectedLocation \u003d \"NUS COM2\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        tasks.changeLocation(0,expectedLocation);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assertEquals(tasks.getTask(0).getLocation().get(0),\"NUS\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String expectedReminder \u003d \"testReminder\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        tasks.changeReminder(0,expectedReminder);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assertEquals(tasks.getTask(0).getReminder(),expectedReminder);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        tasks.changeTime(0,\"12:00-13:00\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        LocalTime expectedTime \u003d LocalTime.parse(\"12:00\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assertEquals(tasks.getTask(0).getTime().get(0),expectedTime);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        tasks.changeDate(0,\"2021-04-20\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        LocalDate expectedDate \u003d LocalDate.parse(\"2021-04-20\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assertEquals(tasks.categoryCounter(expectedDate),1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String expectedDescription \u003d \"testDescription\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        tasks.changeDescription(0,expectedDescription);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assertEquals(tasks.getTask(0).getDescription(),expectedDescription);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String expectedCategory \u003d \"DEADLINE\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        tasks.changeCategory(0,expectedCategory);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assert (tasks.containsCategory(expectedCategory));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assert (!tasks.containsCategory(\"TEST\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assertEquals(tasks.getAllCategory().length,2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        tasks.changeDate(1,\"1 4\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assertEquals(tasks.getTask(1).getDate().get(0).getDayOfWeek().name(),\"MONDAY\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void findTask() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        addTestTask(tasks);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Integer output \u003d tasks.findTasks(\"TEST\").size();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assertEquals(output,2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void setTime_TimeRangeIsWrong_exceptionThrown() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            tasks.addTask(new TaskNonclass(\"testTitle\", \"\", \"\", \"11:00-10:00\", \"NUS\", \"\", \"Test\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            String expected \u003d TAB + Messages.MESSAGE_END_BEFORE_START_TIME;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            assertEquals(expected,e.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 92,
      "rsanchez-macias": 2
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Bencotti": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew shadowJar"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "java -jar %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 1,
      "-": 18
    }
  }
]
