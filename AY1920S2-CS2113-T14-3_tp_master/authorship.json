[
  {
    "path": "CONTRIBUTORS.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Contributors"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Homepage"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---|:---:|:---:|:---:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "![](https://avatars0.githubusercontent.com/u/22460123?s\u003d100) | Daniel Ho | [Github](https://github.com/j-lum/) | [Homepage](https://se.kasugano.moe)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "![](https://avatars0.githubusercontent.com/u/1673303?s\u003d100) | Ricardo | [Github](https://github.com/damithc/) | [Homepage](https://www.comp.nus.edu.sg/~damithch/)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "![](https://avatars0.githubusercontent.com/u/123?s\u003d100) | Yuchen Li | [Github](https://github.com/yuchenlichuck/) | [Homepage](http://liyc.fun)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "![](https://avatars0.githubusercontent.com/u/123?s\u003d100) | Jintan Wang | [Github](https://github.com/yuchenlichuck/) | [Homepage](http://liyc.fun)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# I would like to join this list. How can I help the project"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For more information, please refer to our [contributor\u0027s guide](https://oss-generic.github.io/process/)."
      }
    ],
    "authorContributionMap": {
      "yuchenlichuck": 6,
      "-": 7
    }
  },
  {
    "path": "Save/data.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "[{\"title\":\"research paper \",\"description\":\"essay for writing 101\",\"date\":\"(Unknown Date)\",\"time\":\"\",\"location\":\"\",\"reminder\":\"\",\"category\":\"TODO\"}]"
      }
    ],
    "authorContributionMap": {
      "yuchenlichuck": 1
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "group \u0027seedu.cafs\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    mainClassName \u003d \"seedu.cafs.Main\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    archiveBaseName \u003d \"Main\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.0.1\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 1,
      "Bencotti": 4,
      "-": 37
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Wang Jingtan | [Github](https://github.com/JTWang2000) | [Portfolio](docs/team/jingtan.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "![](https://www.wework.com/ideas/wp-content/uploads/sites/4/2015/11/cookie-monster1-1120x630.jpg) | Daniel Ho | [Github](https://github.com/Bencotti) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Don Joe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ron John | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Roe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "![](https://img1.looper.com/img/gallery/detective-pikachu-2-release-date-cast-and-plot/intro-1568566852.jpg) | Ricardo Sanchez-Macias | [Github](https://github.com/rsanchez-macias) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 1,
      "rsanchez-macias": 1,
      "Bencotti": 1,
      "-": 7
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* [Setting up](#1-setting-up)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* [Design](#2-design)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* [Implementation](#3-implementation)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "  * [Undo features](#31-proposed-undo-feature)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * [View By Category](#311-view-by-category)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* [Documentation](#4-documentation)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* [Testing](#5-testing)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* [Dev Ops](#6-dev-ops)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "  * [Appendix A: Product Scope](#61-appendix-aproduct-scope)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "  * [Appendix B:Value proposition](#62-appendix-bvalue-proposition)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "  * [Appendix C:User Stories](#63-appendix-cuser-stories)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "  * [Appendix D:Non-Functional Requirements](#64-appendix-dnon-functional-requirements)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "  * [Appendix E:Glossary](#65-appendix-eglossary)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "  * [Appendix F:Instructions for Manual Testing](#66-appendix-finstructions-for-manual-testing)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "## 1. Setting up"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "## 2. Design"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "{Describe the design of the product. Use **Architecture Diagram** which has not been covered yet.}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "## 3. Implementation"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "### 3.1 [Proposed] Features"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "#### 3.1.1 List By Category"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "##### 3.1.1.1 Proposed Implementation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "The list by category mechanism is facilitated by ListCommand which extends Command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Given below is an example usage scenario and how the mechanism behaves at each step."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Step1: The user adds a task:  `add n/2113 c/DEADLINE d/2020-03-30 t/11:59` to add a task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Since the user adds a new category `DEADLINE`, the categoryMap wil add one more key whose value is the category and the value is"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "the index for this task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Step2: The users adds a task: `add n/3145 c/CLASS` to add a class. "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Since the user adds a new category `CLASS`, the categoryMap wil add one more key whose value is the category and the value is"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "the index for this task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Step3: Users list the class he just added by category CLASS: `list c/CLASS`. The TaskList will"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "return the index of the tasks based on the categoryMap. Then the task in the `CLASS` category"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "will be displayed. "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "This is the Sequence Diagram for list by category. "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "![Sequence Diagram for View](images/listCategorySequence.png)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "This is the UML design for list by category."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "![UML for View](images/listCategory.png)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "##### 3.1.1.2 Design Considerations"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Aspect: How to find certain category. "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Alternative 1 (current choice): store HashMap to map category with the key. "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Alternative 2 (easy to do): linear search when searching tasks. "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "#### 3.1.2 [Proposed] View month"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "##### 3.1.2.1 Proposed Implementation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "The view month mechanism is facilitated by CalendarCommand which extends Command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "Given below is an example usage scenario and how the mechanism behaves at each step."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. The user inputs the command word `calendar`. Upon which, the instance of parser will return a CalendarCommand for execution"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. CalendarCommand initialises with the following variables, with the help from a calendar class containing the necessary methods related to day/date."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * month - if user does not input month, it uses computer\u0027s current month"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * startingDay - which day of the week the first day of the months begins on (0-6, where 0 is Monday)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * totalDays - how many days in that month"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * totalWeeks - number of weeks of the month"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "  "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. The `calendar` command calls on TaskList#findTaskDate() for each day of the month to generate the task listing for a particular day. Only the task event and description is added to calendar view. "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. The calendar generated is then stored in a string and UI#showUserMesssage() is called to display the calendar. "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "The class diagram below shows the relationships between the different classes required by the `calendar` feature."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "![Sequence diagram for CalendarCommand](images/CalendarCommand_class.jpg)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "The following diagram summarises what happens when a user executes a new `calendar` command:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "![Sequence diagram for CalendarCommand](images/CalendarCommand_sequence.jpg)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "##### 3.1.2.2 Design Considerations"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Aspect: Obtaining information required for generating monthly view"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * Alternative 1: (current choice) Algorithm to deduce how many weeks in month, which day a date is, how many days in that month"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        * Pros: Will use less memory, requiring only one starting date we are able to derive any other dates. No need to worry about changing template for the new year"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        * Cons: New developers will take additional effort to understand how the algorithm works."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "   "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * Alternative 2: Hardcoded information (constant variables to tell days in month/how many weeks)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        * Pros: Easy maintenance, tedious but easily calculated with web applications."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        * Cons: Tedious and not sustainable, constant updates have to be done to edit the fields for a new year"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Aspect: Which month to use"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "   "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * User might want to know schedule for other months, but might also want a quick view of current month"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * Solution is to set a default month (taken from computer) and also allow input for preferred month."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": " "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Aspect: generation of monthly details "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * Calculation of details are shifted from the command to a separate class. "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    This is to enable easier maintenance for methods relating to calendar features."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "## 4. Documentation"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "## 5. Testing"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "There are two ways to do the test."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Method 1: Using IntelliJ JUnit test runner"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "To run all tests, right-click on the src/test/java folder and choose Run `All Tests`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "To run a subset of tests, you can right-click on a test package, test class, or a test and choose Run  `ABC`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Method 2: Using Gradle"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Open a console and run the command gradlew clean test (Mac/Linux: ./gradlew clean test)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "## 6. Dev Ops"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "### 6.1 Appendix A:Product Scope"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Target User profile:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1. University students."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "2. Prefer desktop apps."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "3. Can type fast"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "### 6.2 Appendix B:Value proposition"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "It solves:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1. Daily tasks arrangement"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "2. Class schedule arrangement"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "3. Event alert"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "## 6.3 Appendix C:User Stories"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "|v1.0|No 1. is any type of student [epic] (3)   | add events to my calendar | I know what I have to do in the upcoming weeks |"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "|v1.0|                                          | add the location where events take place | I know where I have to go |"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "|v1.0|                                          | add club, research, project, or other meetings | Be reminded of my activities |"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "|v1.0|No 2. is a university student | delete specific events from my calendar | I don\u0027t get reminded about events that already happened |"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "|v1.0|No 3. is a university student | can move events from one day to another | Will not need to  retype all the event details again |"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "|v1.0|No 5. is a university student | add descriptions to events | to remind myself what the event was about | "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "|v2.0| No 4. is a university student | see multiple calendar views (day, week, month) | I can get different perspectives of what my schedule looks like |"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "|v2.0| No 9. is a university student | export my calendar as a text file | I can print it to have a physical copy |"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "|v2.0| No 10. is a university student | remove all the events that happened in a specific date range | it\u0027s easy to delete unnecessary details from my calendar |"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "|v2.0| No 11. is a university student | add my student schedule | quickly reference it when I forget my next class |"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "|v2.0| No. 23 is a university student | list events by category | I can easily find exactly the events I need to see |"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "|v2.0| No. 24 is a university student | list events by date | I can easily find exactly the events I need to see |"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "|v2.1| No. 6 is a student who cares about friendship | add tokens to specific days in my calendar | I can remember special occasions such as birthdays, religious events, etc. |"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "|v2.1| No. 20 is a university student who has frequent project meetings in school | compare my schedule with team mates easily | we can quickly find a common time to work |"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "## 6.4 Appendix D:Non-Functional Requirements"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Should work in an environment without internet access."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Should offer easy / experienced user input modes to accommodate to different proficiencies"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Data should be persistent across different start-ups"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Not too restrictive on user to avoid frustrations (user friendly)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "## 6.5 Appendix E:Glossary"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "## 6.6 Appendix F:Instructions for Manual Testing"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 72,
      "Bencotti": 59,
      "-": 21
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* [Introduction](#1-introduction)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* [Quick Start](#2-quick-start)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* [Features](#3-features)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "  * [Help command](#31---help)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "  * [Add tasks](#32---add)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "  * [List tasks](#33---list)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "  * [Delete tasks](#34---delete)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "  * [Having done a task](#35---done)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "  * [Find a task](#36---find)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "  * [Save tasks](#37---save)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "  * [Exit the program](#38---exit)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* [Sample Usage](#4-sample-usage)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* [FAQ](#5-faq)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* [Command Summary](#6-command-summary)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "CAFS - va CLI calender-like task scheduler that supports task and "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "class schedule adding. It is simple to use, and comes with a save function to "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "remember your tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Ensure you have Java 11 or above installed in your Computer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "1. Download the latest cafs.jar [here](https://github.com/AY1920S2-CS2113-T14-3/tp/releases)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Copy the file to the folder you want to use as the home folder."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Run the jar file using `java - jar caf.jar`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Link to Developer guide [here](https://github.com/AY1920S2-CS2113-T14-3/tp/blob/master/docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "### 3.1 - Help"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Displays the set of commands supported"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* **Usage**: `help`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "### 3.2 - Add"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "Users add tasks using this command"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* **Usage**: `add  n/\u003cNAME\u003e t/\u003cTime\u003e l/\u003cLOCATION\u003e d/\u003cDATE\u003e i/\u003cINFORMATION\u003e r/\u003cREMINDER\u003e c/\u003cCATEGORY\u003e`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * To add class, just need to specify the category is `CLASS`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * When adding normal tasks:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        * add t/12:00pm n/UG d/02/18/2020 i/UG deadline r/NUS r/1d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        * add t/15:00 n/Project Meeting  d/01-01-2020   i/Work on awesome features"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        * add t/11:00 n/Response Paper  d/02-02-2020 i/Finish essay c/TODO"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * When adding class, the time `t/` becomes time zone of the class (e.g. `12:00-1:00`), and the date"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "       `d/` becomes which day in a week, represented by integer (e.g. `1 3` means Mon Wed)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "       Since a class normally has multiple time zone in a week, student can just add list of time zone."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "       However, the number of `t/`should match with the number of `d/` and the number of location. "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        * add t/11:00-12:00 1:00-3:00 n/2113 d/3 4 c/CLASS l/COM2 COM1"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        * add n/3245 t/17:00-19:00 d/5 c/CLASS"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "### 3.3 - List"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "#### 3.3.1 - List "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Lists all tasks"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* **Usage**: `list`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "#### 3.3.2 - List Category"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Lists tasks belong to a specific category"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* **Usage**: `list c/\u003cCATEGORY\u003e`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Examples:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        * list TODO"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        * list DEADLINE"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "      "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "#### 3.3.3 - List Time"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Lists tasks by specific date/time"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* **Usage**: `list d/\u003cDATE\u003e t/\u003cTIME\u003e`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * It is okay to only list event in a specific date. However, it is not okay to list event in a specific time"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        without inferring the specific date. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * This will also display the classed whose time range overlaps that time."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Also, current does not accept list class. "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * Examples: "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        * list d/2020-03-16 t/15:00"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        * list d/2020-08-10"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "### 3.3.4 - List specific event"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "List tasks by category and date and time. "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* **Usage**: `list c/\u003cCATEGORY\u003e d/\u003cDATE\u003e t/\u003cTIME\u003e`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "### 3.4 - Delete"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Deletes a task from the list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* **Usage**: `delete \u003ctask index\u003e`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * use `list` to derive task index"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * index has to be an _integer_"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "### 3.5 - Done"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Changes the status of a task to completed"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* **Usage**: `done \u003ctask index\u003e`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * use `list` to derive task index"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * index has to be an _integer_"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "### 3.6 - Find"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Searches all task descriptions for supplied keyword"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* **Usage**: `find \u003ckeyword\u003e`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * Keyword has to be a _**single word**_"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * Keyword is case _insensitive_"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "### 3.7 - Save"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Exports my calendar as a text file\t"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "* **Usage**: `save`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "### 3.8 - Calendar"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "Prints a monthy representation of a calendar. Shows the number of tasks a user has on a particular day."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "Users are able to specify which month to look up. Default is the current month. "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "Will still display tasks from past months as long as not marked as complete."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* **Usage**: `calendar \u003coptional month\u003e` "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * Month is in integer representation"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * Where 1 is January and 12 is December"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * Default set to current month"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * If number supplied is not within the month range, it will be set to current month"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "### 3.9 - Exit"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "Exits the program"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "* **Usage**: `bye`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "## 4. Sample Usage"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "1. Search for specific keyword: `find class`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * Expected outcome: displays the above two tasks since they contain keyword \"class\" in description"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "## 5. FAQ"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " * How do I save my tasks?"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * Tasks are saved automatically and loaded upon start up of application"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    * If unable to load, check the directory and file name"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        * Default folder (windows): `C:\\Users\\\u003ccomputer name\u003e\\Save`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        * Default file name: `data.txt`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "## 6. Command Summary"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " * **Add**: `add n/\u003cNAME\u003e t/\u003cTime\u003e l/\u003cLOCATION\u003e d/\u003cDATE\u003e i/\u003cINFORMATION\u003e r/\u003cREMINDER\u003e c/\u003cCATEGORY\u003e`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": " * **List**: "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * `list`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * `list c/\u003ccategory\u003e` "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * `list d/\u003cDATE\u003e t/\u003cTIME\u003e`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * `list c/\u003ccategory\u003e d/\u003cDATE\u003e t/\u003cTIME\u003e`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": " * **Delete**:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    * `delete \u003ctask index\u003e` "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " * **Done**: `done \u003ctask index\u003e` "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " * **Find**: `find \u003ckeyword\u003e` "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": " * **Save**: `save`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " * **Help**: `help`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " * **Calendar**: `calendar` or `calendar \u003cmonth\u003e`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " * **Exit**: `bye`"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 75,
      "Bencotti": 70,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/cafs/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.cafs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.tasklist.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " * Entry point of the CAFS"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " * Initializes the application and starts the interaction with the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"Foo\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Main constructor to set up required classes and check for data file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public Main() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        // search for folder, create if not found"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        storage.checkFolderPath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        // populate if data file is found"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (storage.checkFileExists()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            // log a message at INFO level"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            logger.log(Level.INFO, \"Attempting to read from data file\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            storage.loadFromFile(tasks);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        runCommandLoopUntilExitCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Reads the user command and executes it, until the user issues the exit command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private void runCommandLoopUntilExitCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            String userCommandText \u003d ui.readCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            command \u003d new Parser().parseCommand(userCommandText);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                ui.showResultToUser(result);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            } catch (ProjException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } while (!command.isExit()); // will be solved when do is enabled"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        logger.log(Level.INFO, \"end of processing\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        new Main().run();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 7,
      "rsanchez-macias": 7,
      "Bencotti": 62
    }
  },
  {
    "path": "src/main/java/seedu/calendar/CalendarParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " * Class to support date and calendar relation methods."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class CalendarParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final int CALENDAR_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final String DATE_FORMAT \u003d \"dd/MM/yyyy\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final SimpleDateFormat format \u003d new SimpleDateFormat(DATE_FORMAT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public CalendarParser() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Constructor to accept user input for month."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param month which month to check calendar"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public CalendarParser(int month) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (month \u003c 0 || month \u003e 12) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            calendar.get(Calendar.MONTH); //set default to current month if any error"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            month -\u003d CALENDAR_OFFSET;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            calendar.set(2020, month, 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Get the first day requested month."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return 0 for Sunday, 6 for Saturday"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public int getFirstDay() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMinimum(Calendar.DAY_OF_MONTH));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return calendar.get(Calendar.DAY_OF_WEEK) - CALENDAR_OFFSET; //Sunday is first day, 1"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Get total number of days for requested month."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return max days in month"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public int getTotalDays() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return calendar.getActualMaximum(Calendar.DAY_OF_MONTH); //Sunday is first day, 1"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Total number of weeks in month."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return number of weeks"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public int getTotalWeeks() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMinimum(Calendar.DAY_OF_MONTH));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return calendar.getActualMaximum(Calendar.WEEK_OF_MONTH);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Check which month is selected."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return number of weeks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public int getMonth() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Check which month is selected."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return number of weeks"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static LocalDate convertToDate(String userInput) throws DateTimeParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(userInput, dateFormatter);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return localDate;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static LocalTime convertToTime(String userInput) throws DateTimeParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        LocalTime localTime \u003d LocalTime.parse(userInput, timeFormatter);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return localTime;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bencotti": 100
    }
  },
  {
    "path": "src/main/java/seedu/calendar/GenerateCalendar.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.CalendarCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class GenerateCalendar {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final String VERTICAL_MARK \u003d \"|\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final String JOIN_MARK \u003d \"+\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final int SYMBOL_SIZE \u003d 2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final int DAYS_IN_WEEK \u003d 7;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final String PADDING \u003d \" \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final String[] monthName \u003d {\"January\", \"February\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        \"March\", \"April\", \"May\", \"June\", \"July\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        \"August\", \"September\", \"October\", \"November\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        \"December\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final String[] HEADING \u003d {\"Sunday\", \"Monday\", \"Tuesday\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final int COLUMN_SIZE \u003d 7;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final String HORIZONTAL_SEP \u003d \"-\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final String TASK_IN_DAY \u003d \"Items due: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final int DEFAULT_WIDTH \u003d 15;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final String NEW_LINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final String NO_ENTRY \u003d String.format(\"%s%-\" + DEFAULT_WIDTH + \"s\", VERTICAL_MARK, PADDING);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final int CALENDAR_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    //private List\u003cString[]\u003e rows \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private int startingDay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private int totalDays;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private int totalWeeks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private int dateCounter \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private int currentMonth;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private int currentYear;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private String[] tasksInWeek \u003d new String[7];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Constructor to set up internal variables for generating calendar."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param startingDay first day the first date of month falls on"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param totalDays how many days in month"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param totalWeeks how many weeks in month"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param currentMonth month selected by user"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param currentYear current year"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public GenerateCalendar(int startingDay, int totalDays, int totalWeeks, int currentMonth, int currentYear) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        this.startingDay \u003d startingDay;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        this.totalDays \u003d totalDays;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        this.totalWeeks \u003d totalWeeks;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        this.currentMonth \u003d currentMonth + CALENDAR_OFFSET;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        this.currentYear \u003d currentYear;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Method to print the calendar and format the frame."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Returns a string containing the lines of the calendar"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public String print() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        // printing header and box around it"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String feedback \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        feedback +\u003d String.format(\"Month is: \" + monthName[currentMonth - CALENDAR_OFFSET] + NEW_LINE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        feedback +\u003d printLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        feedback +\u003d printHeader();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        feedback +\u003d printLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        // first week"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        feedback +\u003d printFirstRow();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        feedback +\u003d printLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        while (dateCounter \u003c\u003d totalDays) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            feedback +\u003d printRow();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            feedback +\u003d printLine();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private String printLine() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String currentLine \u003d \"\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        for (int i \u003d 0; i \u003c COLUMN_SIZE; i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            currentLine +\u003d JOIN_MARK;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            currentLine +\u003d String.join(\"\", Collections.nCopies(DEFAULT_WIDTH, HORIZONTAL_SEP));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentLine +\u003d NEW_LINE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return currentLine; //the last plus to end the table"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private String printFirstRow() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        // padding for first week"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String currentWeek \u003d \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        for (int i \u003d 0; i \u003c startingDay; i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            currentWeek +\u003d NO_ENTRY;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        // remainder of first week"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        for (int i \u003d startingDay; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            currentWeek +\u003d String.format(\"%s%-\" + DEFAULT_WIDTH + \"d\", VERTICAL_MARK, dateCounter);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            date \u003d LocalDate.of(currentYear,currentMonth, dateCounter);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            int taskCounter \u003d TaskList.categoryCounter(date);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            if (taskCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                tasksInWeek[i] \u003d null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                tasksInWeek[i] \u003d String.valueOf(taskCounter);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            dateCounter++;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentWeek +\u003d VERTICAL_MARK;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentWeek +\u003d NEW_LINE;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentWeek \u003d getDailyTasks(currentWeek);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentWeek +\u003d VERTICAL_MARK;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentWeek +\u003d NEW_LINE;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return currentWeek;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private String printRow() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String currentWeek \u003d \"\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            if (dateCounter \u003c\u003d totalDays) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                currentWeek +\u003d String.format(\"%s%-\" + DEFAULT_WIDTH + \"d\", VERTICAL_MARK, dateCounter);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                date \u003d LocalDate.of(currentYear,currentMonth, dateCounter);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                int taskCounter \u003d TaskList.categoryCounter(date);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                if (taskCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                    tasksInWeek[i] \u003d null;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                    tasksInWeek[i] \u003d String.valueOf(taskCounter);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                currentWeek +\u003d NO_ENTRY;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            dateCounter++;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentWeek +\u003d VERTICAL_MARK;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentWeek +\u003d NEW_LINE;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentWeek \u003d getDailyTasks(currentWeek);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentWeek +\u003d VERTICAL_MARK;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentWeek +\u003d NEW_LINE;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return currentWeek;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private String getDailyTasks(String currentWeek) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            if (tasksInWeek[i] \u003d\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                currentWeek +\u003d NO_ENTRY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                String calendarInput \u003d TASK_IN_DAY + tasksInWeek[i];"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                currentWeek +\u003d String.format(\"%s%-\" + DEFAULT_WIDTH + \"s\", VERTICAL_MARK, calendarInput);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return currentWeek;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private String printHeader() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String currentLine \u003d \"\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        for (String day : HEADING) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            int padding \u003d DEFAULT_WIDTH + SYMBOL_SIZE - day.length();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            currentLine +\u003d String.format(\"%s%-\" + DEFAULT_WIDTH + \"s\", VERTICAL_MARK, day);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentLine +\u003d VERTICAL_MARK;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentLine +\u003d NEW_LINE;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return currentLine;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bencotti": 172
    }
  },
  {
    "path": "src/main/java/seedu/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.tasks.TaskNonclass;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.tasks.Class;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final String CLASS_CATEGORY \u003d \"CLASS\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \" n/[title] i/[description] t/[hh:mm] \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "           + \"d/[yyyy-mm-dd] l/[LOCATION] r/[REMINDER] c/[CATEGORY]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Nice! Added the following task to the calendar:\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private static final String MESSAGE_CURRENT_TASKS \u003d \"Now you have %d task/tasks in your list\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public AddCommand(String userInput) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.userInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public CommandResult execute() throws ProjException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String title \u003d getTitle(userInput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (title.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            throw new ProjException(\"Please input a title for the task.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String date \u003d getDate(userInput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String description \u003d getDescription(userInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String reminder \u003d getReminder(userInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String time \u003d getTime(userInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String location \u003d getLocation(userInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String category \u003d getCategory(userInput).trim().toUpperCase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (category.equals(CLASS_CATEGORY)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            Integer dateCount \u003d date.split(\"\\\\s+\").length;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            Integer timeCount \u003d time.split(\"\\\\s+\").length;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            if (dateCount !\u003d timeCount) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                throw new ProjException(\"The number of time range must match with the number of day in a week.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            taskList.addTask(new Class(title, description, date, time, location, reminder, \"CLASS\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            taskList.addTask(new TaskNonclass(title, description, date, time, location, reminder, category));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String feedback \u003d formatFeedback(taskList.getTask(taskList.getListSize() - 1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assert !title.isEmpty() : \"Task title should contain at least one char\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return new CommandResult(feedback);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private String formatFeedback(Task task) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String feedback \u003d MESSAGE_SUCCESS + TAB + TAB + task.toString() + System.lineSeparator()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                + String.format(MESSAGE_CURRENT_TASKS, taskList.getListSize())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                + System.lineSeparator();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 40,
      "rsanchez-macias": 28,
      "Bencotti": 3
    }
  },
  {
    "path": "src/main/java/seedu/command/CalendarCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.calendar.GenerateCalendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.calendar.CalendarParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class CalendarCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calendar\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private final String[] months \u003d {\"January\", \"February\", \"March\", \"April\", \"May\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private final String[] days \u003d {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private int startingDay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private  int totalDays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private int totalWeeks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private CalendarParser calendar;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    String feedback \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private int checkMonth;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private int currentYear;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public CalendarCommand(String userInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public CommandResult execute() throws ProjException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        // parsing user input, if not valid int, set as default month"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if ((userInput !\u003d null) \u0026\u0026 (Parser.isInteger(userInput))) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            checkMonth \u003d Integer.parseInt(userInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            calendar \u003d new CalendarParser(checkMonth);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            calendar \u003d new CalendarParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        checkMonth \u003d calendar.getMonth();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        startingDay \u003d calendar.getFirstDay();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        totalDays \u003d calendar.getTotalDays();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        totalWeeks \u003d calendar.getTotalWeeks();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        currentYear \u003d calendar.getYear();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        GenerateCalendar gc \u003d new GenerateCalendar(startingDay, totalDays, totalWeeks, checkMonth, currentYear);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        feedback +\u003d gc.print();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return new CommandResult(feedback);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bencotti": 51
    }
  },
  {
    "path": "src/main/java/seedu/command/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clc\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"clc: clears output window\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    /** Lines to print to clear out the console. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private static final int LINES_TO_PRINT \u003d 100;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String feedback \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        for (int i \u003d 0; i \u003c LINES_TO_PRINT; i++) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            feedback +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return new CommandResult(feedback);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rsanchez-macias": 24
    }
  },
  {
    "path": "src/main/java/seedu/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    protected TaskList taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    // add  n/\u003cNAME\u003e t/\u003cTime\u003e d/\u003cDATE\u003e i/\u003cINFORMATION\u003e l/\u003cLOCATION\u003e r/\u003cREMINDER\u003e c/\u003cCATEGORY\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected static final String TITLE \u003d \"n/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected static final String TIME \u003d \"t/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected static final String DATE \u003d \"d/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected static final String DESCRIPTION \u003d \"i/\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected static final String LOCATION \u003d \"l/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected static final String REMINDER \u003d \"r/\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected static final String CATEGORY \u003d \"c/\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Called to check if exit command is given."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return condition whether program should continue looping or exit"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Supplies the objects other commands will call upon."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * @param taskList  current instance of tasks and corresponding tasklist methods"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param storage instance of storage object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param ui instance of user interaction object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void setCommandVariables(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Gets the title, if any, from the user input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return title"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String getTitle(String userInput) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String title \u003d \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (userInput.contains(TITLE)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            int index \u003d userInput.indexOf(TITLE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            title \u003d findField(userInput, index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return title;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Gets the description, if any, from the user input."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return description"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String getDescription(String userInput) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (userInput.contains(DESCRIPTION)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            int index \u003d userInput.indexOf(DESCRIPTION);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            description \u003d findField(userInput, index);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return description;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Gets the date, if any, from the user input."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return date"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String getDate(String userInput) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String date \u003d \"\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (userInput.contains(DATE)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            int index \u003d userInput.indexOf(DATE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            date \u003d findField(userInput, index);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Gets the reminder, if any, from the user input."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param userInput raw user input."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return reminder."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String getReminder(String userInput) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String reminder \u003d \"\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (userInput.contains(REMINDER)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            int index \u003d userInput.indexOf(REMINDER);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            reminder \u003d findField(userInput, index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return reminder;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return reminder;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Gets the time in format hh:mm, if any, from the user input."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param userInput raw user input."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return time."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String getTime(String userInput) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String time \u003d \"\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (userInput.contains(TIME)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            int index \u003d userInput.indexOf(TIME);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            time \u003d findField(userInput, index);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return time;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Gets the location, if any, from the user input."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param userInput raw user input."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return location."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String getLocation(String userInput) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String location \u003d \"\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (userInput.contains(LOCATION)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            int index \u003d userInput.indexOf(LOCATION);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            location \u003d findField(userInput, index);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return location;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Gets the category.Default one is TODO."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param userInput raw user input."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return category."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String getCategory(String userInput) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String category \u003d \"\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (userInput.contains(CATEGORY)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            int index \u003d userInput.indexOf(CATEGORY);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            category \u003d findField(userInput, index);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return category;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Scans the raw user input to search for the input."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * for a field (e.g. \"essay\" in event n/essay i/world religions)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param fromIndex index marking the beginning of the field"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return expected field"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    private String findField(String userInput, int fromIndex) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String field \u003d \"\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        char nextField \u003d \u0027/\u0027;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        int i \u003d fromIndex + 2;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        while (i \u003c userInput.length() \u0026\u0026 userInput.charAt(i) !\u003d nextField) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            field +\u003d userInput.charAt(i);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (i \u003c userInput.length() \u0026\u0026 userInput.charAt(i) \u003d\u003d nextField) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return field.substring(0, field.length() - 1);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return field;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Executes user command processed by parser."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public abstract CommandResult execute() throws ProjException;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 166,
      "rsanchez-macias": 10,
      "Bencotti": 34
    }
  },
  {
    "path": "src/main/java/seedu/command/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private String feedback;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public CommandResult(String feedback) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        this.feedback \u003d feedback;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public String getFeedback() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rsanchez-macias": 15
    }
  },
  {
    "path": "src/main/java/seedu/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import java.util.IllegalFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \" [task number]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public DeleteCommand(String userInput) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String[] commandSections \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            String strIndex \u003d commandSections[1].trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            int index \u003d Integer.parseInt(strIndex) - 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assert index \u003c taskList.getListSize() : \"index \u003e the size of taskList\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            Task removedTask \u003d taskList.deleteTask(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            storage.overwriteFile(taskList.getList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assert removedTask !\u003d null : \"Removed-task is null\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            return new CommandResult(formatFeedback(removedTask));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_MISSING_NUMBER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        } catch (IllegalFormatException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            String feedback \u003d String.format(Messages.MESSAGE_INVALID_INDEX, commandSections[1]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            return new CommandResult(feedback);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private String formatFeedback(Task removed) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String feedback \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String description \u003d TAB + removed.toString() + System.lineSeparator();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        description +\u003d String.format(TAB + Messages.MESSAGE_REMAINING_TASKS, taskList.getListSize());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        description +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        feedback \u003d String.format(Messages.MESSAGE_DELETE_SUCCESS, description);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rsanchez-macias": 48,
      "Bencotti": 1,
      "yuchenlichuck": 11
    }
  },
  {
    "path": "src/main/java/seedu/command/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    private String taskEdited;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"EDIT\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public EditCommand(String taskEdited,String userInput) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.taskEdited \u003d taskEdited;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Checks if a string can be casted to a number."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param str input string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return true if it can be casted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public static boolean isNumeric(String str) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            Integer.parseInt(str);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Checks if the user has input that field."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param input a field."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return true if user has input that field."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    private Boolean hasInput(String input) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (input.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Edit a task by the task index number."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Cannot edit title of a class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return result of command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @throws ProjException if input invalid task index."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public CommandResult execute() throws ProjException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Boolean isEdit \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (!isNumeric(taskEdited.trim())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            throw new ProjException(\"Please input a task index.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Integer taskEdited \u003d Integer.parseInt(this.taskEdited.trim()) - 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String title \u003d getTitle(userInput);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (hasInput(title)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            throw new ProjException(\"Not allowed to change title.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String description \u003d getDescription(userInput);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (hasInput(description)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            taskList.changeDescription(taskEdited,description);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            isEdit \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String reminder \u003d getReminder(userInput);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (hasInput(reminder)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            taskList.changeReminder(taskEdited,reminder);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            isEdit \u003d true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String date \u003d getDate(userInput);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (hasInput(date)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            taskList.changeDate(taskEdited,date);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            isEdit \u003d true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String time \u003d getTime(userInput);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (hasInput(time)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            taskList.changeTime(taskEdited,time);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            isEdit \u003d true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String location \u003d getLocation(userInput);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (hasInput(location)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            taskList.changeLocation(taskEdited,location);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            isEdit \u003d true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String category \u003d getCategory(userInput).trim().toUpperCase();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (hasInput(category)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            //If it is class, cannot change to task. If it is task, cannot change to class."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            if (category.equals(\"CLASS\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                throw new ProjException(\"Cannot cast a task to class.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            } else if (taskList.getTask(taskEdited).getCategory().equals(\"CLASS\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                throw new ProjException(\"Cannot cast a class to task.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            taskList.changeCategory(taskEdited,category);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            isEdit \u003d true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        //post condition for checking no title input."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assert (!hasInput(title));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (isEdit) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            String feedback \u003d \"Task \" + (taskEdited + 1) + \" edited\\n\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            feedback \u003d feedback + taskList.getTask(taskEdited).toString() + \"\\n\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return new CommandResult(feedback);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            throw new ProjException(\"You have not modified any task as no valid field input. \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 114,
      "rsanchez-macias": 2
    }
  },
  {
    "path": "src/main/java/seedu/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": " * Sends the exit signal to main loop, program is exited after this command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \": exits the program\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Check if exit command is given."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return signal to main loop that program will be terminated"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        return new CommandResult(Messages.BYE_MESSAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "rsanchez-macias": 7,
      "Bencotti": 18,
      "yuchenlichuck": 3
    }
  },
  {
    "path": "src/main/java/seedu/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "import seedu.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.exception.CommandExceptions.FindEmptyPatternException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private String pattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \" [pattern]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public FindCommand(String pattern) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        this.pattern \u003d pattern.trim().substring(4).trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String feedback \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            if (pattern.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                throw new FindEmptyPatternException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            ArrayList\u003cTask\u003e tasks \u003d taskList.findTasks(pattern);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                feedback +\u003d String.format(Messages.MESSAGE_NO_FOUND, pattern);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                feedback \u003d formatFeedback(tasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        } catch (FindEmptyPatternException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            feedback \u003d Messages.MESSAGE_EMPTY_PATTERN;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            return new CommandResult(feedback);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private String formatFeedback(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String list \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String feedback;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            list +\u003d TAB + TAB + (i + 1) + \". \" + tasks.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        feedback \u003d String.format(Messages.MESSAGE_SUCCESS, list);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rsanchez-macias": 58,
      "yuchenlichuck": 4
    }
  },
  {
    "path": "src/main/java/seedu/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String legend \u003d Messages.getLegend();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String commands \u003d Messages.getCommands();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return new CommandResult(legend + commands);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rsanchez-macias": 5,
      "Bencotti": 11
    }
  },
  {
    "path": "src/main/java/seedu/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \": lists the tasks in the calendar\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private static final int LIST_ALL \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private static final int LIST_BY_CATEGORY \u003d 2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private static final int LIST_BY_DATE \u003d 3;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private static final String CLASS_CATEGORY \u003d \"CLASS\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public ListCommand(String userCommand) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.userInput \u003d userCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public CommandResult execute() throws ProjException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String feedback \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        ArrayList\u003cInteger\u003e listTaskIndex \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String category \u003d getCategory(userInput).trim().toUpperCase();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String date \u003d getDate(userInput).trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String time \u003d getTime(userInput).trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        int listCmdSubtype \u003d getCmdSubtype(category, date);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        switch (listCmdSubtype) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        case LIST_ALL:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            getWholeList(listTaskIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        case LIST_BY_CATEGORY:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            getListByCategory(listTaskIndex, category);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        case LIST_BY_DATE:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            getListByDate(listTaskIndex, date, time);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "         */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            // Should not reach here"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        feedback \u003d getFormattedFeedback(listTaskIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return new CommandResult(feedback);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    // Shouldn\u0027t be called dummy"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private void getListByDate(ArrayList\u003cInteger\u003e listTaskIndex, String date, String time) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        Task dummy \u003d new Task(date, time);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getListSize(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            String category \u003d taskList.getTask(i).getCategory().trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            String otherDate \u003d \"\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            if (!taskList.getTask(i).getDate().isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                otherDate \u003d taskList.getTask(i).getDate().get(0).trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            String otherTime \u003d \"\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            if (!taskList.getTask(i).getTime().isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                otherTime \u003d taskList.getTask(i).getTime().get(0).trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            String thisTime \u003d dummy.getTime().get(0).trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            String thisDate \u003d dummy.getDate().get(0).trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            if (category.equals(CLASS_CATEGORY)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            if (thisTime.equals(otherTime) \u0026\u0026 thisDate.equals(otherDate)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                listTaskIndex.add(i);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            if (thisDate.equals(otherDate) \u0026\u0026 time.isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                listTaskIndex.add(i);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private void getWholeList(ArrayList\u003cInteger\u003e listTaskIndex) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getListSize(); i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            listTaskIndex.add(i);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private String getFormattedFeedback(ArrayList\u003cInteger\u003e listTaskIndex) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String feedback \u003d \"There are \" + listTaskIndex.size() + \" tasks.\\n\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        for (int i \u003d 0; i \u003c listTaskIndex.size(); i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            Integer taskIndex \u003d listTaskIndex.get(i);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            feedback +\u003d TAB + TAB + (i + 1) + \". \";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            feedback +\u003d taskList.getTask(taskIndex) + \"\\n\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private void getListByCategory(ArrayList\u003cInteger\u003e listTaskIndex, String category) throws ProjException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        if (!taskList.containsCategory(category)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            ui.showAllCategory(taskList.getAllCategory());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            throw new ProjException(TAB + \"There is no \" + category + \" in current category.\\n\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                    + Ui.DIVIDER);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        for (Integer taskIndex : taskList.getCategoryTask(category)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            listTaskIndex.add(taskIndex);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private int getCmdSubtype(String category, String date) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        if (date.isEmpty() \u0026\u0026 !category.isEmpty()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            return LIST_BY_CATEGORY;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        if (!date.isEmpty() \u0026\u0026 category.isEmpty()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            return LIST_BY_DATE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return LIST_ALL;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 26,
      "rsanchez-macias": 115,
      "Bencotti": 5
    }
  },
  {
    "path": "src/main/java/seedu/common/Constants.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "package seedu.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "public final class Constants {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public static final String DEFAULT_CATEGORY \u003d \"TODO\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String TAB \u003d \"  \";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 5,
      "rsanchez-macias": 3
    }
  },
  {
    "path": "src/main/java/seedu/common/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.command.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.command.FindCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": " * Container class for repeated static Strings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    static final String HELP_COMMAND \u003d TAB + \"Command List:\\n\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    static final String HELP_EXIT \u003d TAB + TAB + \"Exit: Exits program\\n\" + TAB + TAB + \"Usage: bye\\n\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    static final String HELP_LIST \u003d TAB + TAB + \"List: Lists all recorded tasks\\n\" + TAB + TAB + \"Usage: list\\n\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    static final String HELP_ADD \u003d TAB + TAB + \"Add: add task\\n\" + TAB + TAB + \"Usage: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            + AddCommand.COMMAND_USAGE + \"\\n\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    static final String HELP_DELETE \u003d TAB + TAB + \"Delete: Deletes task from list\\n\" + TAB + TAB + \"Usage: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            + DeleteCommand.COMMAND_USAGE + \"\\n\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    static final String HELP_FIND \u003d TAB + TAB + \"Find: Search for task using keyword\\n\" + TAB + TAB + \"Usage: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            + FindCommand.COMMAND_USAGE + \"\\n\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    static final String HELP_LEGEND \u003d \"Legend:\\n\" + TAB + TAB + \"[Y]: Task is completed\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            + TAB + TAB +  \"[N]: Task is not completed\\n\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    // Find Command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Found the followings tasks:\\n%s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public static final String MESSAGE_EMPTY_PATTERN \u003d \"Please enter a pattern to look for \\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public static final String MESSAGE_NO_FOUND \u003d \"No tasks found with %s in their title or description\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public static final String BYE_MESSAGE \u003d \"CAFS: Bye, hope to see you again!\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    //Delete Command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"The entered index %s is invalid. + \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            + \"Please enter a valid task number\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public static final String MESSAGE_MISSING_NUMBER \u003d \"Missing task number to delete\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public static final String MESSAGE_REMAINING_TASKS \u003d \"Now you have %d task/tasks in your calendar\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public static final String MESSAGE_DELETE_SUCCESS \u003d \"The following task has been removed:\\n %s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Formats the list of available commands."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * @return list of supported commands"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static String getCommands() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String fullCommand \u003d HELP_COMMAND + HELP_EXIT + HELP_LIST"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                + HELP_ADD + HELP_DELETE + HELP_FIND;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return fullCommand;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Gets the legend information for the supported commands."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * @return legend information"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static String getLegend() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return HELP_LEGEND;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rsanchez-macias": 36,
      "Bencotti": 15,
      "yuchenlichuck": 13
    }
  },
  {
    "path": "src/main/java/seedu/exception/CommandExceptions.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "public class CommandExceptions extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static class FindEmptyPatternException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        public FindEmptyPatternException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rsanchez-macias": 13
    }
  },
  {
    "path": "src/main/java/seedu/exception/ProjException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "public class ProjException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public ProjException(String error) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 7,
      "rsanchez-macias": 2
    }
  },
  {
    "path": "src/main/java/seedu/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.ListCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.CalendarCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.HelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.ClearCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param userCommand user input including command word and parameters"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return  command based on user input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static Command parseCommand(String userCommand) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String[] commandSections \u003d userCommand.split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String command \u003d commandSections[0].toLowerCase().trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return new ListCommand(userCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return new DeleteCommand(userCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return new AddCommand(userCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            return new FindCommand(userCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return new EditCommand(commandSections[1], userCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        case CalendarCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            if (commandSections.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                return new CalendarCommand(commandSections[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            if (commandSections.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                return new CalendarCommand(null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            System.out.println(\"Command not recognised\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Check if String is a valid integer."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param value Input string for checking"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return boolean if string is valid"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static boolean isInteger(String value) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        for (char c : value.toCharArray()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            if (!Character.isDigit(c)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 4,
      "rsanchez-macias": 25,
      "Bencotti": 56
    }
  },
  {
    "path": "src/main/java/seedu/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final String WORKING_DIRECTORY \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final java.nio.file.Path FOLDER_PATH \u003d java.nio.file.Paths.get(WORKING_DIRECTORY, \"Save\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final java.nio.file.Path FILE_PATH \u003d java.nio.file.Paths.get(WORKING_DIRECTORY, \"Save\", \"data.txt\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Locate folder location and check availability."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * If missing create folder."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static void checkFolderPath() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        boolean directoryExists \u003d java.nio.file.Files.exists(FOLDER_PATH);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (!directoryExists) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                Files.createDirectory(FOLDER_PATH);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                System.out.println(\"Error creating folder!\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Check whether data file has is present in directory."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return status of file availability"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static boolean checkFileExists() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        boolean fileExists \u003d java.nio.file.Files.exists(FILE_PATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return fileExists;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static String convertToGson(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        Gson gsonTaskList \u003d new Gson();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return gsonTaskList.toJson(taskList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static String convertToGson(Task task) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        Gson gsonTaskList \u003d new Gson();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return gsonTaskList.toJson(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Converting data file input string to Task objects within array list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * will change to read string by string instead, to prevent buffer overflow."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param gsonTaskList data file contents saved within a string"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return arraylist of task objects"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static ArrayList\u003cTask\u003e convertFromGson(String gsonTaskList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        Type userListType \u003d new TypeToken\u003cArrayList\u003cTask\u003e\u003e(){}.getType();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return gson.fromJson(gsonTaskList, userListType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Over writes saved data file with latest task list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param taskList current task list for saving"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static void overwriteFile(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String formattedTaskList \u003d convertToGson(taskList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            File file \u003d new File(String.valueOf(FILE_PATH));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            FileWriter myWriter \u003d new FileWriter(file, false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            myWriter.write(formattedTaskList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            myWriter.close();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            //System.out.println(\"Successfully updated data file!\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            System.out.println(\"[Error] File cannot be written!\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static void saveTaskToFile(Task task) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String formattedTask \u003d convertToGson(task);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            File file \u003d new File(String.valueOf(FILE_PATH));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            FileWriter myWriter \u003d new FileWriter(file, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            myWriter.write(formattedTask);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            myWriter.close();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            //System.out.println(\"Successfully updated data file!\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            System.out.println(\"[Error] File cannot be written!\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Reading in data file and storing into tasklist."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param taskList tasklist object created in main"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void loadFromFile(TaskList taskList) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            String gsonTaskList \u003d new String(Files.readAllBytes(Paths.get(String.valueOf(FILE_PATH))));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            if (!gsonTaskList.isBlank()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                //System.out.println(gsonTaskList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                ArrayList\u003cTask\u003e tasks \u003d convertFromGson(gsonTaskList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                taskList.updateTaskList(tasks);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            System.out.println(\"Error reading data file! \\n\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 5,
      "rsanchez-macias": 3,
      "Bencotti": 111
    }
  },
  {
    "path": "src/main/java/seedu/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.tasks.TaskNonclass;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    private static HashMap\u003cString,ArrayList\u003cInteger\u003e\u003e categoryMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    //Accessors:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    // TODO Fix so that method returns a deep copy of the list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    //Mutator methods:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void changeDescription(int taskIndex, String newDescription) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        taskList.get(taskIndex).setDescription(newDescription);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void changeDate(int taskIndex, String newDate) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        taskList.get(taskIndex).setDate(newDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void changeTime(int taskIndex, String newTime) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        taskList.get(taskIndex).setTime(newTime);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void changeLocation(int taskIndex, String newLocation) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        taskList.get(taskIndex).setLocation(newLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void changeReminder(int taskIndex, String newReminder) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        taskList.get(taskIndex).setReminder(newReminder);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Change category of a task and change the category mapping."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param taskIndex Index of task that needs to be changed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param newCategory Newly category."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void changeCategory(int taskIndex, String newCategory) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String oldCategory \u003d taskList.get(taskIndex).getCategory();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.categoryMap.get(oldCategory).remove(taskIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        taskList.get(taskIndex).setCategory(newCategory);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        updateCategoryMap(newCategory,taskIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    //Methods:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Checks if the given task contains the given pattern."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param task task to inspect"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param pattern pattern to look for in task"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return true if task contains pattern"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    private boolean hasPattern(Task task, String pattern) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return task.getTitle().contains(pattern) || task.getDescription().contains(pattern);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    private void updateCategoryMap(String category, Integer index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (category.length() !\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            if (!categoryMap.containsKey(category)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                this.categoryMap.put(category, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            this.categoryMap.get(category).add(index);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Add tasks and update the category mapping."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param task Task to add."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        updateCategoryMap(task.getCategory(),taskList.size() - 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * When updating a task from the storage, also need to add category mapping."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param tasks tasks loaded."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void updateTaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        taskList \u003d tasks;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Integer index \u003d 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        categoryMap.clear();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            updateCategoryMap(task.getCategory(),index);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Removes a task and return a reference to that object."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * @param index Index of task to remove"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * @return Removed task"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public Task deleteTask(int index) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String category \u003d taskList.get(index).getCategory();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        categoryMap.get(category).remove(index);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (categoryMap.get(category).size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            categoryMap.remove(category);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Task toRemove \u003d taskList.get(index);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        taskList.remove(index);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return toRemove;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Finds the tasks that contain the given pattern in their"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * title or description."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * @param pattern pattern to look for in the tasks"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * @return tasks that match the pattern"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public ArrayList\u003cTask\u003e findTasks(String pattern) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            if (hasPattern(task, pattern)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                foundTasks.add(task);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        return foundTasks;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public Boolean containsCategory(String category) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return this.categoryMap.containsKey(category);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public ArrayList\u003cInteger\u003e getCategoryTask(String category) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return this.categoryMap.get(category);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String[] getAllCategory() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return this.categoryMap.keySet().toArray(new String[this.categoryMap.size()]);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Checks list of tasks with supplied date to see how many tasks for that date."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param checkDate date used to check against list"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return number of tasks for that day"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public static int categoryCounter(LocalDate checkDate) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        int totalTasksDay \u003d 0;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        // searching every task to see if date matches"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            int matchedTask;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            TaskNonclass taskNonClass \u003d (TaskNonclass) task;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            LocalDate taskDate \u003d taskNonClass.getDate();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            matchedTask \u003d checkDate.compareTo(taskDate);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            if (matchedTask \u003d\u003d 0) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                totalTasksDay++;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return totalTasksDay;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 99,
      "rsanchez-macias": 52,
      "Bencotti": 36,
      "yuchenlichuck": 1
    }
  },
  {
    "path": "src/main/java/seedu/tasks/Class.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "package seedu.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "public class Class extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    protected ArrayList\u003cString\u003e date \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    protected ArrayList\u003cString\u003e time \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    protected ArrayList\u003cString\u003e location \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Constructor method for initialising new class object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param title title of class"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param description description of class"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param date range of days the class will be on"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param time range of time the class will be held"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param location location of class"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param reminder any additional reminder if any"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param category categorise the class by grouping in needed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public Class(String title, String description, String date, String time, String location,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                        String reminder, String category) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        super(title,description,reminder,category);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (!date.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            setDate(date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (!time.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            setTime(time);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (!location.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            setLocation(location);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void setDate(String dateInput) throws DateTimeParseException, NumberFormatException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (this.category.equals(\"CLASS\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            String[] days \u003d dateInput.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            for (String day : days) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                Integer dayOfWeekInt \u003d Integer.parseInt(day);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                if (dayOfWeekInt \u003e 7 | dayOfWeekInt \u003c 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                    throw new NumberFormatException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                DayOfWeek dayOfWeek \u003d DayOfWeek.of(Integer.parseInt(day));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                this.date.add(dayOfWeek.name());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void setTime(String time) throws DateTimeParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (this.category.equals(\"CLASS\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            String[] timeInfo \u003d time.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            for (String atime : timeInfo) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                this.time.add(atime);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void setLocation(String location) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String[] locations \u003d location.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        for (String oneLocation : locations) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            this.location.add(oneLocation);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public ArrayList\u003cString\u003e getDate() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public ArrayList\u003cString\u003e getTime() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public ArrayList\u003cString\u003e getLocation() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return this.location;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Return string of class in its specific format."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return string of class."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String formattedTask \u003d super.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        for (int i \u003d 0; i \u003c date.size(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            formattedTask \u003d formattedTask + String.format(\" | %s : %s\", date.get(i),time.get(i));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            if (location.size() \u003e i) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                formattedTask \u003d formattedTask + String.format(\" ( %s )\",location.get(i));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return formattedTask;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 25,
      "Bencotti": 75
    }
  },
  {
    "path": "src/main/java/seedu/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "package seedu.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.calendar.CalendarParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import static seedu.common.Constants.DEFAULT_CATEGORY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected String title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected String reminder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected String category;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Initialize task based on its category."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param title       title of class."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param description description of class if any."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param reminder    reminder of class if any."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param category    category of class. Default is TODO."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public Task(String title, String description, String reminder, String category) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (!category.isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            this.category \u003d category.trim().toUpperCase();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            this.category \u003d DEFAULT_CATEGORY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        // post condition check for existence of title"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assert (title.length() !\u003d 0) : title;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Initialize task with only date and time information."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Used to compare dates and times."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * @param date Task date"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * @param time Task time"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public Task(String date, String time) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        this.category \u003d \"dummy\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        setDate(date);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        setTime(time);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Check if a field is empty of not."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param input a field."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return true if it is not empty."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    protected Boolean hasInput(String input) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (input.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    //Mutator:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void setReminder(String reminder) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void setCategory(String category) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public abstract void setDate(String dateInput) throws DateTimeParseException, NumberFormatException;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /*  {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            if (this.category.equals(\"CLASS\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                String[] days \u003d dateInput.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                for (String day : days) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                    Integer dayOfWeekInt \u003d Integer.parseInt(day);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                    if (dayOfWeekInt \u003e 7 | dayOfWeekInt \u003c 1) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                        throw new NumberFormatException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                    DayOfWeek dayOfWeek \u003d DayOfWeek.of(Integer.parseInt(day));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                    this.date.add(dayOfWeek.name());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                this.date.clear();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                LocalDate Date \u003d CalendarParser.convertToDate(dateInput);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     }*/"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "     * Set time to format: hh.mm aa"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param time input time with accepted format: hh:mm"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public abstract void setTime(String time) throws DateTimeParseException;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /*{"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (this.category.equals(\"CLASS\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            String[] timeInfo \u003d time.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            for (String atime : timeInfo) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                this.time.add(atime);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            this.time.clear();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                SimpleDateFormat originalFormat \u003d new SimpleDateFormat(\"HH:mm\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                //HH means 24 hours. However, hh means 12hours"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                Date originalTime \u003d originalFormat.parse(time);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                SimpleDateFormat newFormat \u003d new SimpleDateFormat(\"hh.mm a\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "                this.time.add(newFormat.format(originalTime));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                this.time.add(\"(Unknown time)\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Set the input location to right format."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * It it is a class, the location will be split to different part."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param location input location."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public abstract void setLocation(String location);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /*{"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (this.category.equals(\"CLASS\")) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            String[] locations \u003d location.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            for (String oneLocation : locations) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                this.location.add(oneLocation);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            this.location.clear();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            this.location.add(location);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    //Accessors:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return this.category;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Output correct string format when listing tasks."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return correct format in string."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        // Post condition check that there should always be a category."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assert (category.length() !\u003d 0);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String formattedTask \u003d String.format(\"[%s] Title: %s\", category.toUpperCase().trim(), title.trim());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (hasInput(description)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            formattedTask \u003d formattedTask + String.format(\" | Description: %s\", description);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        if (hasInput(reminder)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            formattedTask \u003d formattedTask + String.format(\" | Reminder: %s\", reminder);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return formattedTask;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 142,
      "rsanchez-macias": 16,
      "Bencotti": 34,
      "yuchenlichuck": 7
    }
  },
  {
    "path": "src/main/java/seedu/tasks/TaskNonclass.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "package seedu.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.calendar.CalendarParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "public class TaskNonclass extends Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    protected String location;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private boolean isDateSet \u003d false; // let us set a default without printing if user didnt set"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private boolean isTimeSet \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Initializes Task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param title title of deadline if any."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param description description of deadline if any."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param date date in format:yyyy-mm-dd of deadline if any."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param time time in format: hh:mm of deadline if any."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param location location of deadline if any."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param reminder reminder of deadline if any."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public TaskNonclass(String title, String description, String date, String time, String location,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "                        String reminder, String category) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        super(title,description,reminder,category);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        //set default date to date inserted"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (!date.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            System.out.println(\"Have date\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            setDate(date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            this.date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (!time.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            setTime(time);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (!location.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            setLocation(location);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void setDate(String dateInput) throws DateTimeParseException, NumberFormatException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (dateInput.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            this.date \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            this.date \u003d CalendarParser.convertToDate(dateInput);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            isDateSet \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void setTime(String timeInput) throws DateTimeParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (timeInput.isEmpty()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            this.time \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            this.time \u003d CalendarParser.convertToTime(timeInput);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            isTimeSet \u003d true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void setLocation(String location) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public String getLocation() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Format the string to be correct output form."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @return a string."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        // Post condition check that there should always be a category."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assert (category.length() !\u003d 0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String formattedTask \u003d super.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (isDateSet) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            formattedTask \u003d formattedTask + String.format(\" | Date: %s\", date.toString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (isTimeSet) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            formattedTask \u003d formattedTask + String.format(\" | Time: %s\", time.toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        if (location !\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            formattedTask \u003d formattedTask + String.format(\" | Location: %s\",location);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        return formattedTask;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 35,
      "rsanchez-macias": 7,
      "Bencotti": 71
    }
  },
  {
    "path": "src/main/java/seedu/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static seedu.common.Constants.TAB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /** A platform independent line separator. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private static final String NEW_LINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public static final String DIVIDER \u003d \"__________________________________________________________________________\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    private static final String PROMPT \u003d \"What is your command?\" + NEW_LINE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private  static final  String LOGO \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "                \" ______     ______     ______   ______\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                + TAB + \"/\\\\  ___\\\\   /\\\\  __ \\\\   /\\\\  ___\\\\ /\\\\  ___\\\\\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                + TAB + \"\\\\ \\\\ \\\\____  \\\\ \\\\  __ \\\\  \\\\ \\\\  __\\\\ \\\\ \\\\___  \\\\\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                + TAB + \" \\\\ \\\\_____\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\    \\\\/\\\\_____\\\\\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "                + TAB + \"  \\\\/_____/   \\\\/_/\\\\/_/   \\\\/_/     \\\\/_____/\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private Scanner input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Returns true if the user input line should be ignored."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * Input should be ignored if it is only whitespace, or is empty. (add more conditions if needed)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param rawInputLine full raw user input line."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return true if the entire user input line should be ignored."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    private boolean shouldIgnoreInput(String rawInputLine) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return rawInputLine.trim().isEmpty();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Method used to print all messages back to user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Meant to improve performance by reducing number of system calls used."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @param messages  Variable length argument to display to users"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void showUserMessage(String... messages) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        for (String message : messages) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "            System.out.print(message);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        showUserMessage(LOGO);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "     * Prompts user for input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     * @return String containing user command for parsing"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        System.out.print(PROMPT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        String userCommand \u003d input.nextLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        assert userCommand.length() \u003e 0 : \"Command input should contain at least one word\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        return userCommand;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * Displays all category."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     * @param categories array of categories."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void showAllCategory(String[] categories) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        System.out.println(NEW_LINE + TAB + \"Current categories: \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        for (String category : categories) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            System.out.println(TAB + TAB + \" \u003e\u003e\u003e\" + category);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    public void showResultToUser(CommandResult result) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        showUserMessage(result.getFeedback());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void showError(String error) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        System.out.println(error);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 15,
      "rsanchez-macias": 28,
      "Bencotti": 44
    }
  },
  {
    "path": "src/test/java/seedu/cafs/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "package seedu.cafs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.command.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public void testAddDeadlineYeapYear() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input \u003d \"add n/task t/11:15 d/2024-02-29\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String expected \u003d \"[TODO] Title: task | Date: 2024-02-29 | Time: 11.15 AM\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        AddCommand command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String output \u003d tasks.getTask(0).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        boolean isEqual \u003d output.equals(expected);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        assertTrue(isEqual);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public void testAddDeadlineCheckTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input \u003d \"add n/task t/12:15 d/2024-02-29\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String expected \u003d \"[TODO] Title: task | Date: 2024-02-29 | Time: 12.15 PM\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        AddCommand command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String output \u003d tasks.getTask(0).toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        boolean isEqual \u003d output.equals(expected);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assertTrue(isEqual);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public void testAddDeadline() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input \u003d \"add n/task t/20:18 d/2020-04-10\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String expected \u003d \"[TODO] Title: task | Date: 2020-04-10 | Time: 08.18 PM\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        AddCommand command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String output \u003d tasks.getTask(0).toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        boolean isEqual \u003d output.equals(expected);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        assertTrue(isEqual);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    public void testAddDeadlineUnknownDate() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String input \u003d \"add n/task t/05:15 d/2024-02-30\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String expected \u003d \"[TODO] Title: task | Date: (Unknown Date) | Time: 05.15 AM\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        AddCommand command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        String output \u003d tasks.getTask(0).toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        boolean isEqual \u003d output.equals(expected);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "        assertTrue(isEqual);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void addCommand_noTitle_exceptionThrown() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            String firstInput \u003d \"add\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            AddCommand firstCommand \u003d new AddCommand(firstInput);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            firstCommand.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            firstCommand.execute();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            assertEquals(\"Please input a title for the task.\", e.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 50,
      "Bencotti": 3,
      "yuchenlichuck": 67
    }
  },
  {
    "path": "src/test/java/seedu/cafs/EditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "package seedu.cafs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.command.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.command.EditCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.tasklist.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void testCorrectOutput() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String firstInput \u003d \"add n/Sleep early\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String firstExpected \u003d \"[TODO] Title: Sleep early\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        AddCommand firstCommand \u003d new AddCommand(firstInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        firstCommand.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            firstCommand.execute();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String firstOutput \u003d tasks.getTask(0).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assertTrue(firstOutput.equals(firstExpected));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String secondInput \u003d \"edit 1 i/for your health\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String secondExpected \u003d \"[TODO] Title: Sleep early | Description: for your health\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        EditCommand secondCommand \u003d new EditCommand(\"1\",secondInput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        secondCommand.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            secondCommand.execute();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String secondOutput \u003d tasks.getTask(0).toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        assertTrue(secondOutput.equals(secondExpected));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuchenlichuck"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    public void editCommand_editTitle_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            String firstInput \u003d \"add n/Sleep early\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            AddCommand firstCommand \u003d new AddCommand(firstInput);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            firstCommand.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            firstCommand.execute();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            String secondInput \u003d \"edit 1 n/Sleep now\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            EditCommand secondCommand \u003d new EditCommand(\"1\", secondInput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            secondCommand.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            secondCommand.execute();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            assertEquals(\"Not allowed to change title.\", e.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 69,
      "Bencotti": 3,
      "yuchenlichuck": 3
    }
  },
  {
    "path": "src/test/java/seedu/cafs/MainTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "package seedu.cafs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.command.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.command.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "import seedu.exception.ProjException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import seedu.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.tasklist.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "import seedu.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "class MainTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "    Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String input \u003d \"add n/research paper d/02-04-2020 i/essay for writing 101\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        String expected \u003d \"[TODO] Title: research paper | Description: essay for writing 101 | Date: (Unknown Date)\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        AddCommand command \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        } catch (ProjException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String output \u003d tasks.getTask(0).toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        boolean isEqual \u003d output.equals(expected);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rsanchez-macias"
        },
        "content": "        assertTrue(isEqual);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    public void emptyCommandTest() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        String testInput \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        Command command \u003d new Parser().parseCommand(testInput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        command.setCommandVariables(tasks, storage, ui);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        boolean checkIfHelpCommand \u003d command instanceof HelpCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "        assertTrue(checkIfHelpCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 11,
      "rsanchez-macias": 14,
      "Bencotti": 18,
      "-": 9
    }
  },
  {
    "path": "src/test/seedu/cafs/MainTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.cafs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "class MainTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    void run() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    void main() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bencotti": 17
    }
  },
  {
    "path": "src/test/seedu/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "package seedu.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bencotti"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    void parseCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "       assertNotNull(new Object());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "       //assertNull(null);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bencotti": 15
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bencotti"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Bencotti": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JTWang2000"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew shadowJar"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "java -jar %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      }
    ],
    "authorContributionMap": {
      "JTWang2000": 1,
      "-": 18
    }
  }
]
